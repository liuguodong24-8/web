import "./chunk-JX35THHM.js";
import {
  Fragment,
  computed2 as computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  normalizeClass,
  normalizeStyle,
  openBlock,
  ref,
  renderList,
  toDisplayString,
  unref,
  watch
} from "./chunk-T25ATDQL.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/v-code-diff/dist/index.es.js
(function() {
  "use strict";
  try {
    if (typeof document != "undefined") {
      var o = document.createElement("style");
      o.appendChild(document.createTextNode(".code-diff-view{--color-canvas-default-transparent: rgba(255,255,255,0);--color-page-header-bg: #f6f8fa;--color-marketing-icon-primary: #218bff;--color-marketing-icon-secondary: #54aeff;--color-diff-blob-addition-num-text: #24292f;--color-diff-blob-addition-fg: #24292f;--color-diff-blob-addition-num-bg: #ccffd8;--color-diff-blob-addition-line-bg: #e6ffec;--color-diff-blob-addition-word-bg: #abf2bc;--color-diff-blob-deletion-num-text: #24292f;--color-diff-blob-deletion-fg: #24292f;--color-diff-blob-deletion-num-bg: #ffd7d5;--color-diff-blob-deletion-line-bg: #ffebe9;--color-diff-blob-deletion-word-bg: rgba(255,129,130,.4);--color-diff-blob-hunk-num-bg: rgba(84,174,255,.4);--color-diff-blob-expander-icon: #57606a;--color-diff-blob-selected-line-highlight-mix-blend-mode: multiply;--color-diffstat-deletion-border: rgba(27,31,36,.15);--color-diffstat-addition-border: rgba(27,31,36,.15);--color-diffstat-addition-bg: #2da44e;--color-search-keyword-hl: #fff8c5;--color-prettylights-syntax-comment: #6e7781;--color-prettylights-syntax-constant: #0550ae;--color-prettylights-syntax-entity: #8250df;--color-prettylights-syntax-storage-modifier-import: #24292f;--color-prettylights-syntax-entity-tag: #116329;--color-prettylights-syntax-keyword: #cf222e;--color-prettylights-syntax-string: #0a3069;--color-prettylights-syntax-variable: #953800;--color-prettylights-syntax-brackethighlighter-unmatched: #82071e;--color-prettylights-syntax-invalid-illegal-text: #f6f8fa;--color-prettylights-syntax-invalid-illegal-bg: #82071e;--color-prettylights-syntax-carriage-return-text: #f6f8fa;--color-prettylights-syntax-carriage-return-bg: #cf222e;--color-prettylights-syntax-string-regexp: #116329;--color-prettylights-syntax-markup-list: #3b2300;--color-prettylights-syntax-markup-heading: #0550ae;--color-prettylights-syntax-markup-italic: #24292f;--color-prettylights-syntax-markup-bold: #24292f;--color-prettylights-syntax-markup-deleted-text: #82071e;--color-prettylights-syntax-markup-deleted-bg: #ffebe9;--color-prettylights-syntax-markup-inserted-text: #116329;--color-prettylights-syntax-markup-inserted-bg: #dafbe1;--color-prettylights-syntax-markup-changed-text: #953800;--color-prettylights-syntax-markup-changed-bg: #ffd8b5;--color-prettylights-syntax-markup-ignored-text: #eaeef2;--color-prettylights-syntax-markup-ignored-bg: #0550ae;--color-prettylights-syntax-meta-diff-range: #8250df;--color-prettylights-syntax-brackethighlighter-angle: #57606a;--color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;--color-prettylights-syntax-constant-other-reference-link: #0a3069;--color-codemirror-text: #24292f;--color-codemirror-bg: #ffffff;--color-codemirror-gutters-bg: #ffffff;--color-codemirror-guttermarker-text: #ffffff;--color-codemirror-guttermarker-subtle-text: #6e7781;--color-codemirror-linenumber-text: #57606a;--color-codemirror-cursor: #24292f;--color-codemirror-selection-bg: rgba(84,174,255,.4);--color-codemirror-activeline-bg: rgba(234,238,242,.5);--color-codemirror-matchingbracket-text: #24292f;--color-codemirror-lines-bg: #ffffff;--color-codemirror-syntax-comment: #24292f;--color-codemirror-syntax-constant: #0550ae;--color-codemirror-syntax-entity: #8250df;--color-codemirror-syntax-keyword: #cf222e;--color-codemirror-syntax-storage: #cf222e;--color-codemirror-syntax-string: #0a3069;--color-codemirror-syntax-support: #0550ae;--color-codemirror-syntax-variable: #953800;--color-checks-bg: #24292f;--color-checks-run-border-width: 0px;--color-checks-container-border-width: 0px;--color-checks-text-primary: #f6f8fa;--color-checks-text-secondary: #8c959f;--color-checks-text-link: #54aeff;--color-checks-btn-icon: #afb8c1;--color-checks-btn-hover-icon: #f6f8fa;--color-checks-btn-hover-bg: rgba(255,255,255,.125);--color-checks-input-text: #eaeef2;--color-checks-input-placeholder-text: #8c959f;--color-checks-input-focus-text: #8c959f;--color-checks-input-bg: #32383f;--color-checks-input-shadow: none;--color-checks-donut-error: #fa4549;--color-checks-donut-pending: #bf8700;--color-checks-donut-success: #2da44e;--color-checks-donut-neutral: #afb8c1;--color-checks-dropdown-text: #afb8c1;--color-checks-dropdown-bg: #32383f;--color-checks-dropdown-border: #424a53;--color-checks-dropdown-shadow: rgba(27,31,36,.3);--color-checks-dropdown-hover-text: #f6f8fa;--color-checks-dropdown-hover-bg: #424a53;--color-checks-dropdown-btn-hover-text: #f6f8fa;--color-checks-dropdown-btn-hover-bg: #32383f;--color-checks-scrollbar-thumb-bg: #57606a;--color-checks-header-label-text: #d0d7de;--color-checks-header-label-open-text: #f6f8fa;--color-checks-header-border: #32383f;--color-checks-header-icon: #8c959f;--color-checks-line-text: #d0d7de;--color-checks-line-num-text: rgba(140,149,159,.75);--color-checks-line-timestamp-text: #8c959f;--color-checks-line-hover-bg: #32383f;--color-checks-line-selected-bg: rgba(33,139,255,.15);--color-checks-line-selected-num-text: #54aeff;--color-checks-line-dt-fm-text: #24292f;--color-checks-line-dt-fm-bg: #9a6700;--color-checks-gate-bg: rgba(125,78,0,.15);--color-checks-gate-text: #d0d7de;--color-checks-gate-waiting-text: #d4a72c;--color-checks-step-header-open-bg: #32383f;--color-checks-step-error-text: #ff8182;--color-checks-step-warning-text: #d4a72c;--color-checks-logline-text: #8c959f;--color-checks-logline-num-text: rgba(140,149,159,.75);--color-checks-logline-debug-text: #c297ff;--color-checks-logline-error-text: #d0d7de;--color-checks-logline-error-num-text: #ff8182;--color-checks-logline-error-bg: rgba(164,14,38,.15);--color-checks-logline-warning-text: #d0d7de;--color-checks-logline-warning-num-text: #d4a72c;--color-checks-logline-warning-bg: rgba(125,78,0,.15);--color-checks-logline-command-text: #54aeff;--color-checks-logline-section-text: #4ac26b;--color-checks-ansi-black: #24292f;--color-checks-ansi-black-bright: #32383f;--color-checks-ansi-white: #d0d7de;--color-checks-ansi-white-bright: #d0d7de;--color-checks-ansi-gray: #8c959f;--color-checks-ansi-red: #ff8182;--color-checks-ansi-red-bright: #ffaba8;--color-checks-ansi-green: #4ac26b;--color-checks-ansi-green-bright: #6fdd8b;--color-checks-ansi-yellow: #d4a72c;--color-checks-ansi-yellow-bright: #eac54f;--color-checks-ansi-blue: #54aeff;--color-checks-ansi-blue-bright: #80ccff;--color-checks-ansi-magenta: #c297ff;--color-checks-ansi-magenta-bright: #d8b9ff;--color-checks-ansi-cyan: #76e3ea;--color-checks-ansi-cyan-bright: #b3f0ff;--color-project-header-bg: #24292f;--color-project-sidebar-bg: #ffffff;--color-project-gradient-in: #ffffff;--color-project-gradient-out: rgba(255,255,255,0);--color-mktg-btn-bg: #1b1f23;--color-mktg-btn-shadow-outline: rgb(0 0 0 / 15%) 0 0 0 1px inset;--color-mktg-btn-shadow-focus: rgb(0 0 0 / 15%) 0 0 0 4px;--color-mktg-btn-shadow-hover: 0 3px 2px rgba(0, 0, 0, .07), 0 7px 5px rgba(0, 0, 0, .04), 0 12px 10px rgba(0, 0, 0, .03), 0 22px 18px rgba(0, 0, 0, .03), 0 42px 33px rgba(0, 0, 0, .02), 0 100px 80px rgba(0, 0, 0, .02);--color-mktg-btn-shadow-hover-muted: rgb(0 0 0 / 70%) 0 0 0 2px inset;--color-avatar-bg: #ffffff;--color-avatar-border: rgba(27,31,36,.15);--color-avatar-stack-fade: #afb8c1;--color-avatar-stack-fade-more: #d0d7de;--color-avatar-child-shadow: -2px -2px 0 rgba(255,255,255,.8);--color-topic-tag-border: rgba(0,0,0,0);--color-counter-border: rgba(0,0,0,0);--color-select-menu-backdrop-border: rgba(0,0,0,0);--color-select-menu-tap-highlight: rgba(175,184,193,.5);--color-select-menu-tap-focus-bg: #b6e3ff;--color-overlay-shadow: 0 1px 3px rgba(27,31,36,.12), 0 8px 24px rgba(66,74,83,.12);--color-header-text: rgba(255,255,255,.7);--color-header-bg: #24292f;--color-header-divider: #57606a;--color-header-logo: #ffffff;--color-header-search-bg: #24292f;--color-header-search-border: #57606a;--color-sidenav-selected-bg: #ffffff;--color-menu-bg-active: rgba(0,0,0,0);--color-input-disabled-bg: rgba(175,184,193,.2);--color-timeline-badge-bg: #eaeef2;--color-ansi-black: #24292f;--color-ansi-black-bright: #57606a;--color-ansi-white: #6e7781;--color-ansi-white-bright: #8c959f;--color-ansi-gray: #6e7781;--color-ansi-red: #cf222e;--color-ansi-red-bright: #a40e26;--color-ansi-green: #116329;--color-ansi-green-bright: #1a7f37;--color-ansi-yellow: #4d2d00;--color-ansi-yellow-bright: #633c01;--color-ansi-blue: #0969da;--color-ansi-blue-bright: #218bff;--color-ansi-magenta: #8250df;--color-ansi-magenta-bright: #a475f9;--color-ansi-cyan: #1b7c83;--color-ansi-cyan-bright: #3192aa;--color-btn-text: #24292f;--color-btn-bg: #f6f8fa;--color-btn-border: rgba(27,31,36,.15);--color-btn-shadow: 0 1px 0 rgba(27,31,36,.04);--color-btn-inset-shadow: inset 0 1px 0 rgba(255,255,255,.25);--color-btn-hover-bg: #f3f4f6;--color-btn-hover-border: rgba(27,31,36,.15);--color-btn-active-bg: hsla(220,14%,93%,1);--color-btn-active-border: rgba(27,31,36,.15);--color-btn-selected-bg: hsla(220,14%,94%,1);--color-btn-focus-bg: #f6f8fa;--color-btn-focus-border: rgba(27,31,36,.15);--color-btn-focus-shadow: 0 0 0 3px rgba(9,105,218,.3);--color-btn-shadow-active: inset 0 .15em .3em rgba(27,31,36,.15);--color-btn-shadow-input-focus: 0 0 0 .2em rgba(9,105,218,.3);--color-btn-counter-bg: rgba(27,31,36,.08);--color-btn-primary-text: #ffffff;--color-btn-primary-bg: #2da44e;--color-btn-primary-border: rgba(27,31,36,.15);--color-btn-primary-shadow: 0 1px 0 rgba(27,31,36,.1);--color-btn-primary-inset-shadow: inset 0 1px 0 rgba(255,255,255,.03);--color-btn-primary-hover-bg: #2c974b;--color-btn-primary-hover-border: rgba(27,31,36,.15);--color-btn-primary-selected-bg: hsla(137,55%,36%,1);--color-btn-primary-selected-shadow: inset 0 1px 0 rgba(0,45,17,.2);--color-btn-primary-disabled-text: rgba(255,255,255,.8);--color-btn-primary-disabled-bg: #94d3a2;--color-btn-primary-disabled-border: rgba(27,31,36,.15);--color-btn-primary-focus-bg: #2da44e;--color-btn-primary-focus-border: rgba(27,31,36,.15);--color-btn-primary-focus-shadow: 0 0 0 3px rgba(45,164,78,.4);--color-btn-primary-icon: rgba(255,255,255,.8);--color-btn-primary-counter-bg: rgba(255,255,255,.2);--color-btn-outline-text: #0969da;--color-btn-outline-hover-text: #ffffff;--color-btn-outline-hover-bg: #0969da;--color-btn-outline-hover-border: rgba(27,31,36,.15);--color-btn-outline-hover-shadow: 0 1px 0 rgba(27,31,36,.1);--color-btn-outline-hover-inset-shadow: inset 0 1px 0 rgba(255,255,255,.03);--color-btn-outline-hover-counter-bg: rgba(255,255,255,.2);--color-btn-outline-selected-text: #ffffff;--color-btn-outline-selected-bg: hsla(212,92%,42%,1);--color-btn-outline-selected-border: rgba(27,31,36,.15);--color-btn-outline-selected-shadow: inset 0 1px 0 rgba(0,33,85,.2);--color-btn-outline-disabled-text: rgba(9,105,218,.5);--color-btn-outline-disabled-bg: #f6f8fa;--color-btn-outline-disabled-counter-bg: rgba(9,105,218,.05);--color-btn-outline-focus-border: rgba(27,31,36,.15);--color-btn-outline-focus-shadow: 0 0 0 3px rgba(5,80,174,.4);--color-btn-outline-counter-bg: rgba(9,105,218,.1);--color-btn-danger-text: #cf222e;--color-btn-danger-hover-text: #ffffff;--color-btn-danger-hover-bg: #a40e26;--color-btn-danger-hover-border: rgba(27,31,36,.15);--color-btn-danger-hover-shadow: 0 1px 0 rgba(27,31,36,.1);--color-btn-danger-hover-inset-shadow: inset 0 1px 0 rgba(255,255,255,.03);--color-btn-danger-hover-counter-bg: rgba(255,255,255,.2);--color-btn-danger-selected-text: #ffffff;--color-btn-danger-selected-bg: hsla(356,72%,44%,1);--color-btn-danger-selected-border: rgba(27,31,36,.15);--color-btn-danger-selected-shadow: inset 0 1px 0 rgba(76,0,20,.2);--color-btn-danger-disabled-text: rgba(207,34,46,.5);--color-btn-danger-disabled-bg: #f6f8fa;--color-btn-danger-disabled-counter-bg: rgba(207,34,46,.05);--color-btn-danger-focus-border: rgba(27,31,36,.15);--color-btn-danger-focus-shadow: 0 0 0 3px rgba(164,14,38,.4);--color-btn-danger-counter-bg: rgba(207,34,46,.1);--color-btn-danger-icon: #cf222e;--color-btn-danger-hover-icon: #ffffff;--color-underlinenav-icon: #6e7781;--color-underlinenav-border-hover: rgba(175,184,193,.2);--color-action-list-item-inline-divider: rgba(208,215,222,.48);--color-action-list-item-default-hover-bg: rgba(208,215,222,.32);--color-action-list-item-default-hover-border: rgba(0,0,0,0);--color-action-list-item-default-active-bg: rgba(208,215,222,.48);--color-action-list-item-default-active-border: rgba(0,0,0,0);--color-action-list-item-default-selected-bg: rgba(208,215,222,.24);--color-action-list-item-danger-hover-bg: rgba(255,235,233,.64);--color-action-list-item-danger-active-bg: #ffebe9;--color-action-list-item-danger-hover-text: #cf222e;--color-switch-track-bg: #eaeef2;--color-switch-track-border: #afb8c1;--color-switch-track-checked-bg: #ddf4ff;--color-switch-track-checked-hover-bg: #b6e3ff;--color-switch-track-checked-active-bg: #80ccff;--color-switch-track-checked-border: #54aeff;--color-switch-knob-checked-bg: #0969da;--color-switch-knob-checked-disabled-bg: #6e7781;--color-segmented-control-bg: #eaeef2;--color-segmented-control-button-hover-bg: rgba(175,184,193,.2);--color-segmented-control-button-active-bg: rgba(175,184,193,.4);--color-segmented-control-button-selected-border: #6e7781;--color-fg-default: #24292f;--color-fg-muted: #57606a;--color-fg-subtle: #6e7781;--color-fg-on-emphasis: #ffffff;--color-canvas-default: #ffffff;--color-canvas-overlay: #ffffff;--color-canvas-inset: #f6f8fa;--color-canvas-subtle: #f6f8fa;--color-border-default: #d0d7de;--color-border-muted: hsla(210,18%,87%,1);--color-border-subtle: rgba(27,31,36,.15);--color-shadow-small: 0 1px 0 rgba(27,31,36,.04);--color-shadow-medium: 0 3px 6px rgba(140,149,159,.15);--color-shadow-large: 0 8px 24px rgba(140,149,159,.2);--color-shadow-extra-large: 0 12px 28px rgba(140,149,159,.3);--color-neutral-emphasis-plus: #24292f;--color-neutral-emphasis: #6e7781;--color-neutral-muted: rgba(175,184,193,.2);--color-neutral-subtle: rgba(234,238,242,.5);--color-accent-fg: #0969da;--color-accent-emphasis: #0969da;--color-accent-muted: rgba(84,174,255,.4);--color-accent-subtle: #ddf4ff;--color-success-fg: #1a7f37;--color-success-emphasis: #2da44e;--color-success-muted: rgba(74,194,107,.4);--color-success-subtle: #dafbe1;--color-attention-fg: #9a6700;--color-attention-emphasis: #bf8700;--color-attention-muted: rgba(212,167,44,.4);--color-attention-subtle: #fff8c5;--color-severe-fg: #bc4c00;--color-severe-emphasis: #bc4c00;--color-severe-muted: rgba(251,143,68,.4);--color-severe-subtle: #fff1e5;--color-danger-fg: #cf222e;--color-danger-emphasis: #cf222e;--color-danger-muted: rgba(255,129,130,.4);--color-danger-subtle: #ffebe9;--color-open-fg: #1a7f37;--color-open-emphasis: #2da44e;--color-open-muted: rgba(74,194,107,.4);--color-open-subtle: #dafbe1;--color-closed-fg: #cf222e;--color-closed-emphasis: #cf222e;--color-closed-muted: rgba(255,129,130,.4);--color-closed-subtle: #ffebe9;--color-done-fg: #8250df;--color-done-emphasis: #8250df;--color-done-muted: rgba(194,151,255,.4);--color-done-subtle: #fbefff;--color-sponsors-fg: #bf3989;--color-sponsors-emphasis: #bf3989;--color-sponsors-muted: rgba(255,128,200,.4);--color-sponsors-subtle: #ffeff7;--color-primer-fg-disabled: #8c959f;--color-primer-canvas-backdrop: rgba(27,31,36,.5);--color-primer-canvas-sticky: rgba(255,255,255,.95);--color-primer-border-active: #fd8c73;--color-primer-border-contrast: rgba(27,31,36,.1);--color-primer-shadow-highlight: inset 0 1px 0 rgba(255,255,255,.25);--color-primer-shadow-inset: inset 0 1px 0 rgba(208,215,222,.2);--color-primer-shadow-focus: 0 0 0 3px rgba(9,105,218,.3);--color-scale-black: #1b1f24;--color-scale-white: #ffffff;--color-scale-gray-0: #f6f8fa;--color-scale-gray-1: #eaeef2;--color-scale-gray-2: #d0d7de;--color-scale-gray-3: #afb8c1;--color-scale-gray-4: #8c959f;--color-scale-gray-5: #6e7781;--color-scale-gray-6: #57606a;--color-scale-gray-7: #424a53;--color-scale-gray-8: #32383f;--color-scale-gray-9: #24292f;--color-scale-blue-0: #ddf4ff;--color-scale-blue-1: #b6e3ff;--color-scale-blue-2: #80ccff;--color-scale-blue-3: #54aeff;--color-scale-blue-4: #218bff;--color-scale-blue-5: #0969da;--color-scale-blue-6: #0550ae;--color-scale-blue-7: #033d8b;--color-scale-blue-8: #0a3069;--color-scale-blue-9: #002155;--color-scale-green-0: #dafbe1;--color-scale-green-1: #aceebb;--color-scale-green-2: #6fdd8b;--color-scale-green-3: #4ac26b;--color-scale-green-4: #2da44e;--color-scale-green-5: #1a7f37;--color-scale-green-6: #116329;--color-scale-green-7: #044f1e;--color-scale-green-8: #003d16;--color-scale-green-9: #002d11;--color-scale-yellow-0: #fff8c5;--color-scale-yellow-1: #fae17d;--color-scale-yellow-2: #eac54f;--color-scale-yellow-3: #d4a72c;--color-scale-yellow-4: #bf8700;--color-scale-yellow-5: #9a6700;--color-scale-yellow-6: #7d4e00;--color-scale-yellow-7: #633c01;--color-scale-yellow-8: #4d2d00;--color-scale-yellow-9: #3b2300;--color-scale-orange-0: #fff1e5;--color-scale-orange-1: #ffd8b5;--color-scale-orange-2: #ffb77c;--color-scale-orange-3: #fb8f44;--color-scale-orange-4: #e16f24;--color-scale-orange-5: #bc4c00;--color-scale-orange-6: #953800;--color-scale-orange-7: #762c00;--color-scale-orange-8: #5c2200;--color-scale-orange-9: #471700;--color-scale-red-0: #ffebe9;--color-scale-red-1: #ffcecb;--color-scale-red-2: #ffaba8;--color-scale-red-3: #ff8182;--color-scale-red-4: #fa4549;--color-scale-red-5: #cf222e;--color-scale-red-6: #a40e26;--color-scale-red-7: #82071e;--color-scale-red-8: #660018;--color-scale-red-9: #4c0014;--color-scale-purple-0: #fbefff;--color-scale-purple-1: #ecd8ff;--color-scale-purple-2: #d8b9ff;--color-scale-purple-3: #c297ff;--color-scale-purple-4: #a475f9;--color-scale-purple-5: #8250df;--color-scale-purple-6: #6639ba;--color-scale-purple-7: #512a97;--color-scale-purple-8: #3e1f79;--color-scale-purple-9: #2e1461;--color-scale-pink-0: #ffeff7;--color-scale-pink-1: #ffd3eb;--color-scale-pink-2: #ffadda;--color-scale-pink-3: #ff80c8;--color-scale-pink-4: #e85aad;--color-scale-pink-5: #bf3989;--color-scale-pink-6: #99286e;--color-scale-pink-7: #772057;--color-scale-pink-8: #611347;--color-scale-pink-9: #4d0336;--color-scale-coral-0: #fff0eb;--color-scale-coral-1: #ffd6cc;--color-scale-coral-2: #ffb4a1;--color-scale-coral-3: #fd8c73;--color-scale-coral-4: #ec6547;--color-scale-coral-5: #c4432b;--color-scale-coral-6: #9e2f1c;--color-scale-coral-7: #801f0f;--color-scale-coral-8: #691105;--color-scale-coral-9: #510901}.code-diff-view{position:relative;margin-top:16px;margin-bottom:16px;border:1px solid var(--color-border-default, #ddd);border-radius:6px;overflow-y:auto}.code-diff-view *{position:static;box-sizing:border-box}.code-diff-view .file-header{background-color:var(--color-canvas-subtle);border-bottom:1px solid var(--color-border-default);padding:8px 16px;font-size:12px;font-family:ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace}.code-diff-view .file-header .file-info{display:flex;justify-content:space-between;align-items:center;margin-left:8px;height:24px}.code-diff-view .file-header .file-info .filename{font-size:13px;color:var(--color-fg-default)}.code-diff-view .file-header .file-info .diff-stat .diff-stat-added{color:var(--color-diffstat-addition-bg)}.code-diff-view .file-header .file-info .diff-stat .diff-stat-deleted{color:var(--color-danger-emphasis)}.code-diff-view table{border-spacing:0}.code-diff-view .diff-table{width:100%}.code-diff-view .diff-table .blob-num{position:relative;width:1%;min-width:50px;padding-right:10px;padding-left:10px;font-family:ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;font-size:12px;line-height:20px;color:var(--color-fg-subtle);text-align:right;white-space:nowrap;vertical-align:top;cursor:pointer;-webkit-user-select:none;user-select:none}.code-diff-view .diff-table .blob-num-deletion{color:var(--color-diff-blob-deletion-num-text);background-color:var(--color-diff-blob-deletion-num-bg);border-color:var(--color-danger-emphasis)}.code-diff-view .diff-table .blob-num-addition{color:var(--color-diff-blob-addition-num-text);background-color:var(--color-diff-blob-addition-num-bg);border-color:var(--color-success-emphasis)}.code-diff-view .diff-table .blob-code{position:relative;padding-right:10px;padding-left:10px;line-height:20px;vertical-align:top}.code-diff-view .diff-table .blob-code .blob-code-inner{display:table-cell;overflow:visible;font-family:ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;font-size:12px;color:var(--color-fg-default);word-wrap:anywhere;white-space:pre-wrap}.code-diff-view .diff-table .blob-code-deletion{background-color:var(--color-diff-blob-deletion-line-bg);outline:1px dashed transparent}.code-diff-view .diff-table .blob-code-deletion .x{color:var(--color-diff-blob-deletion-fg);background-color:var(--color-diff-blob-deletion-word-bg)}.code-diff-view .diff-table .blob-code-addition{background-color:var(--color-diff-blob-addition-line-bg);outline:1px dotted transparent}.code-diff-view .diff-table .blob-code-addition .x{color:var(--color-diff-blob-addition-fg);background-color:var(--color-diff-blob-addition-word-bg)}.code-diff-view .diff-table .blob-code-context,.code-diff-view .diff-table .blob-code-addition,.code-diff-view .diff-table .blob-code-deletion{padding-left:22px!important}.code-diff-view .diff-table .blob-code-marker:before{position:absolute;top:1px;left:8px;padding-right:8px;content:attr(data-code-marker)}.code-diff-view .diff-table .blob-num-hunk{background-color:var(--color-diff-blob-hunk-num-bg)}.code-diff-view .diff-table .blob-code-hunk{background-color:var(--color-accent-subtle)}.code-diff-view .file-diff-split{table-layout:fixed}.code-diff-view .file-diff-split .blob-code+.blob-num{border-left:1px solid var(--color-border-muted)}.code-diff-view .empty-cell{cursor:default;background-color:var(--color-neutral-subtle);border-right-color:var(--color-border-muted)}pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{background:#fff;color:#000}.hljs-comment,.hljs-quote,.hljs-variable{color:green}.hljs-built_in,.hljs-keyword,.hljs-name,.hljs-selector-tag,.hljs-tag{color:#00f}.hljs-addition,.hljs-attribute,.hljs-literal,.hljs-section,.hljs-string,.hljs-template-tag,.hljs-template-variable,.hljs-title,.hljs-type{color:#a31515}.hljs-deletion,.hljs-meta,.hljs-selector-attr,.hljs-selector-pseudo{color:#2b91af}.hljs-doctag{color:gray}.hljs-attr{color:red}.hljs-bullet,.hljs-link,.hljs-symbol{color:#00b0e8}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}")), document.head.appendChild(o);
    }
  } catch (e) {
    console.error("vite-plugin-css-injected-by-js", e);
  }
})();
function re() {
}
re.prototype = {
  diff: function(t, l) {
    var u = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, h = u.callback;
    typeof u == "function" && (h = u, u = {}), this.options = u;
    var n = this;
    function r(p) {
      return h ? (setTimeout(function() {
        h(void 0, p);
      }, 0), true) : p;
    }
    t = this.castInput(t), l = this.castInput(l), t = this.removeEmpty(this.tokenize(t)), l = this.removeEmpty(this.tokenize(l));
    var i = l.length, s = t.length, a = 1, o = i + s;
    u.maxEditLength && (o = Math.min(o, u.maxEditLength));
    var c = [{
      newPos: -1,
      components: []
    }], f = this.extractCommon(c[0], l, t, 0);
    if (c[0].newPos + 1 >= i && f + 1 >= s)
      return r([{
        value: this.join(l),
        count: l.length
      }]);
    function g() {
      for (var p = -1 * a; p <= a; p += 2) {
        var b = void 0, E = c[p - 1], v = c[p + 1], y = (v ? v.newPos : 0) - p;
        E && (c[p - 1] = void 0);
        var m = E && E.newPos + 1 < i, D = v && 0 <= y && y < s;
        if (!m && !D) {
          c[p] = void 0;
          continue;
        }
        if (!m || D && E.newPos < v.newPos ? (b = Hn(v), n.pushComponent(b.components, void 0, true)) : (b = E, b.newPos++, n.pushComponent(b.components, true, void 0)), y = n.extractCommon(b, l, t, p), b.newPos + 1 >= i && y + 1 >= s)
          return r(xn(n, b.components, l, t, n.useLongestToken));
        c[p] = b;
      }
      a++;
    }
    if (h)
      (function p() {
        setTimeout(function() {
          if (a > o)
            return h();
          g() || p();
        }, 0);
      })();
    else
      for (; a <= o; ) {
        var d = g();
        if (d)
          return d;
      }
  },
  pushComponent: function(t, l, u) {
    var h = t[t.length - 1];
    h && h.added === l && h.removed === u ? t[t.length - 1] = {
      count: h.count + 1,
      added: l,
      removed: u
    } : t.push({
      count: 1,
      added: l,
      removed: u
    });
  },
  extractCommon: function(t, l, u, h) {
    for (var n = l.length, r = u.length, i = t.newPos, s = i - h, a = 0; i + 1 < n && s + 1 < r && this.equals(l[i + 1], u[s + 1]); )
      i++, s++, a++;
    return a && t.components.push({
      count: a
    }), t.newPos = i, s;
  },
  equals: function(t, l) {
    return this.options.comparator ? this.options.comparator(t, l) : t === l || this.options.ignoreCase && t.toLowerCase() === l.toLowerCase();
  },
  removeEmpty: function(t) {
    for (var l = [], u = 0; u < t.length; u++)
      t[u] && l.push(t[u]);
    return l;
  },
  castInput: function(t) {
    return t;
  },
  tokenize: function(t) {
    return t.split("");
  },
  join: function(t) {
    return t.join("");
  }
};
function xn(e, t, l, u, h) {
  for (var n = 0, r = t.length, i = 0, s = 0; n < r; n++) {
    var a = t[n];
    if (a.removed) {
      if (a.value = e.join(u.slice(s, s + a.count)), s += a.count, n && t[n - 1].added) {
        var c = t[n - 1];
        t[n - 1] = t[n], t[n] = c;
      }
    } else {
      if (!a.added && h) {
        var o = l.slice(i, i + a.count);
        o = o.map(function(g, d) {
          var p = u[s + d];
          return p.length > g.length ? p : g;
        }), a.value = e.join(o);
      } else
        a.value = e.join(l.slice(i, i + a.count));
      i += a.count, a.added || (s += a.count);
    }
  }
  var f = t[r - 1];
  return r > 1 && typeof f.value == "string" && (f.added || f.removed) && e.equals("", f.value) && (t[r - 2].value += f.value, t.pop()), t;
}
function Hn(e) {
  return {
    newPos: e.newPos,
    components: e.components.slice(0)
  };
}
var zn = new re();
function Fn(e, t, l) {
  return zn.diff(e, t, l);
}
function Gn(e, t) {
  if (typeof e == "function")
    t.callback = e;
  else if (e)
    for (var l in e)
      e.hasOwnProperty(l) && (t[l] = e[l]);
  return t;
}
var qe = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
var en = /\S/;
var Fe = new re();
Fe.equals = function(e, t) {
  return this.options.ignoreCase && (e = e.toLowerCase(), t = t.toLowerCase()), e === t || this.options.ignoreWhitespace && !en.test(e) && !en.test(t);
};
Fe.tokenize = function(e) {
  for (var t = e.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/), l = 0; l < t.length - 1; l++)
    !t[l + 1] && t[l + 2] && qe.test(t[l]) && qe.test(t[l + 2]) && (t[l] += t[l + 2], t.splice(l + 1, 2), l--);
  return t;
};
function Kn(e, t, l) {
  return l = Gn(l, {
    ignoreWhitespace: true
  }), Fe.diff(e, t, l);
}
var gn = new re();
gn.tokenize = function(e) {
  var t = [], l = e.split(/(\n|\r\n)/);
  l[l.length - 1] || l.pop();
  for (var u = 0; u < l.length; u++) {
    var h = l[u];
    u % 2 && !this.options.newlineIsToken ? t[t.length - 1] += h : (this.options.ignoreWhitespace && (h = h.trim()), t.push(h));
  }
  return t;
};
var Wn = new re();
Wn.tokenize = function(e) {
  return e.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var Qn = new re();
Qn.tokenize = function(e) {
  return e.split(/([{}:;,]|\s+)/);
};
function Le(e) {
  return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Le = function(t) {
    return typeof t;
  } : Le = function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Le(e);
}
var Zn = Object.prototype.toString;
var _e = new re();
_e.useLongestToken = true;
_e.tokenize = gn.tokenize;
_e.castInput = function(e) {
  var t = this.options, l = t.undefinedReplacement, u = t.stringifyReplacer, h = u === void 0 ? function(n, r) {
    return typeof r == "undefined" ? l : r;
  } : u;
  return typeof e == "string" ? e : JSON.stringify(xe(e, null, null, h), h, "  ");
};
_e.equals = function(e, t) {
  return re.prototype.equals.call(_e, e.replace(/,([\r\n])/g, "$1"), t.replace(/,([\r\n])/g, "$1"));
};
function xe(e, t, l, u, h) {
  t = t || [], l = l || [], u && (e = u(h, e));
  var n;
  for (n = 0; n < t.length; n += 1)
    if (t[n] === e)
      return l[n];
  var r;
  if (Zn.call(e) === "[object Array]") {
    for (t.push(e), r = new Array(e.length), l.push(r), n = 0; n < e.length; n += 1)
      r[n] = xe(e[n], t, l, u, h);
    return t.pop(), l.pop(), r;
  }
  if (e && e.toJSON && (e = e.toJSON()), Le(e) === "object" && e !== null) {
    t.push(e), r = {}, l.push(r);
    var i = [], s;
    for (s in e)
      e.hasOwnProperty(s) && i.push(s);
    for (i.sort(), n = 0; n < i.length; n += 1)
      s = i[n], r[s] = xe(e[s], t, l, u, s);
    t.pop(), l.pop();
  } else
    r = e;
  return r;
}
var He = new re();
He.tokenize = function(e) {
  return e.slice();
};
He.join = He.removeEmpty = function(e) {
  return e;
};
var be = {};
var Yn = {
  get exports() {
    return be;
  },
  set exports(e) {
    be = e;
  }
};
(function(e) {
  var t = function() {
    this.Diff_Timeout = 1, this.Diff_EditCost = 4, this.Match_Threshold = 0.5, this.Match_Distance = 1e3, this.Patch_DeleteThreshold = 0.5, this.Patch_Margin = 4, this.Match_MaxBits = 32;
  }, l = -1, u = 1, h = 0;
  t.Diff = function(n, r) {
    return [n, r];
  }, t.prototype.diff_main = function(n, r, i, s) {
    typeof s == "undefined" && (this.Diff_Timeout <= 0 ? s = Number.MAX_VALUE : s = (/* @__PURE__ */ new Date()).getTime() + this.Diff_Timeout * 1e3);
    var a = s;
    if (n == null || r == null)
      throw new Error("Null input. (diff_main)");
    if (n == r)
      return n ? [new t.Diff(h, n)] : [];
    typeof i == "undefined" && (i = true);
    var o = i, c = this.diff_commonPrefix(n, r), f = n.substring(0, c);
    n = n.substring(c), r = r.substring(c), c = this.diff_commonSuffix(n, r);
    var g = n.substring(n.length - c);
    n = n.substring(0, n.length - c), r = r.substring(0, r.length - c);
    var d = this.diff_compute_(n, r, o, a);
    return f && d.unshift(new t.Diff(h, f)), g && d.push(new t.Diff(h, g)), this.diff_cleanupMerge(d), d;
  }, t.prototype.diff_compute_ = function(n, r, i, s) {
    var a;
    if (!n)
      return [new t.Diff(u, r)];
    if (!r)
      return [new t.Diff(l, n)];
    var o = n.length > r.length ? n : r, c = n.length > r.length ? r : n, f = o.indexOf(c);
    if (f != -1)
      return a = [
        new t.Diff(u, o.substring(0, f)),
        new t.Diff(h, c),
        new t.Diff(
          u,
          o.substring(f + c.length)
        )
      ], n.length > r.length && (a[0][0] = a[2][0] = l), a;
    if (c.length == 1)
      return [
        new t.Diff(l, n),
        new t.Diff(u, r)
      ];
    var g = this.diff_halfMatch_(n, r);
    if (g) {
      var d = g[0], p = g[1], b = g[2], E = g[3], v = g[4], y = this.diff_main(d, b, i, s), m = this.diff_main(p, E, i, s);
      return y.concat(
        [new t.Diff(h, v)],
        m
      );
    }
    return i && n.length > 100 && r.length > 100 ? this.diff_lineMode_(n, r, s) : this.diff_bisect_(n, r, s);
  }, t.prototype.diff_lineMode_ = function(n, r, i) {
    var s = this.diff_linesToChars_(n, r);
    n = s.chars1, r = s.chars2;
    var a = s.lineArray, o = this.diff_main(n, r, false, i);
    this.diff_charsToLines_(o, a), this.diff_cleanupSemantic(o), o.push(new t.Diff(h, ""));
    for (var c = 0, f = 0, g = 0, d = "", p = ""; c < o.length; ) {
      switch (o[c][0]) {
        case u:
          g++, p += o[c][1];
          break;
        case l:
          f++, d += o[c][1];
          break;
        case h:
          if (f >= 1 && g >= 1) {
            o.splice(
              c - f - g,
              f + g
            ), c = c - f - g;
            for (var b = this.diff_main(d, p, false, i), E = b.length - 1; E >= 0; E--)
              o.splice(c, 0, b[E]);
            c = c + b.length;
          }
          g = 0, f = 0, d = "", p = "";
          break;
      }
      c++;
    }
    return o.pop(), o;
  }, t.prototype.diff_bisect_ = function(n, r, i) {
    for (var s = n.length, a = r.length, o = Math.ceil((s + a) / 2), c = o, f = 2 * o, g = new Array(f), d = new Array(f), p = 0; p < f; p++)
      g[p] = -1, d[p] = -1;
    g[c + 1] = 0, d[c + 1] = 0;
    for (var b = s - a, E = b % 2 != 0, v = 0, y = 0, m = 0, D = 0, S = 0; S < o && !((/* @__PURE__ */ new Date()).getTime() > i); S++) {
      for (var A = -S + v; A <= S - y; A += 2) {
        var I = c + A, R;
        A == -S || A != S && g[I - 1] < g[I + 1] ? R = g[I + 1] : R = g[I - 1] + 1;
        for (var z = R - A; R < s && z < a && n.charAt(R) == r.charAt(z); )
          R++, z++;
        if (g[I] = R, R > s)
          y += 2;
        else if (z > a)
          v += 2;
        else if (E) {
          var U = c + b - A;
          if (U >= 0 && U < f && d[U] != -1) {
            var $ = s - d[U];
            if (R >= $)
              return this.diff_bisectSplit_(n, r, R, z, i);
          }
        }
      }
      for (var G = -S + m; G <= S - D; G += 2) {
        var U = c + G, $;
        G == -S || G != S && d[U - 1] < d[U + 1] ? $ = d[U + 1] : $ = d[U - 1] + 1;
        for (var Q = $ - G; $ < s && Q < a && n.charAt(s - $ - 1) == r.charAt(a - Q - 1); )
          $++, Q++;
        if (d[U] = $, $ > s)
          D += 2;
        else if (Q > a)
          m += 2;
        else if (!E) {
          var I = c + b - G;
          if (I >= 0 && I < f && g[I] != -1) {
            var R = g[I], z = c + R - I;
            if ($ = s - $, R >= $)
              return this.diff_bisectSplit_(n, r, R, z, i);
          }
        }
      }
    }
    return [
      new t.Diff(l, n),
      new t.Diff(u, r)
    ];
  }, t.prototype.diff_bisectSplit_ = function(n, r, i, s, a) {
    var o = n.substring(0, i), c = r.substring(0, s), f = n.substring(i), g = r.substring(s), d = this.diff_main(o, c, false, a), p = this.diff_main(f, g, false, a);
    return d.concat(p);
  }, t.prototype.diff_linesToChars_ = function(n, r) {
    var i = [], s = {};
    i[0] = "";
    function a(g) {
      for (var d = "", p = 0, b = -1, E = i.length; b < g.length - 1; ) {
        b = g.indexOf(`
`, p), b == -1 && (b = g.length - 1);
        var v = g.substring(p, b + 1);
        (s.hasOwnProperty ? s.hasOwnProperty(v) : s[v] !== void 0) ? d += String.fromCharCode(s[v]) : (E == o && (v = g.substring(p), b = g.length), d += String.fromCharCode(E), s[v] = E, i[E++] = v), p = b + 1;
      }
      return d;
    }
    var o = 4e4, c = a(n);
    o = 65535;
    var f = a(r);
    return { chars1: c, chars2: f, lineArray: i };
  }, t.prototype.diff_charsToLines_ = function(n, r) {
    for (var i = 0; i < n.length; i++) {
      for (var s = n[i][1], a = [], o = 0; o < s.length; o++)
        a[o] = r[s.charCodeAt(o)];
      n[i][1] = a.join("");
    }
  }, t.prototype.diff_commonPrefix = function(n, r) {
    if (!n || !r || n.charAt(0) != r.charAt(0))
      return 0;
    for (var i = 0, s = Math.min(n.length, r.length), a = s, o = 0; i < a; )
      n.substring(o, a) == r.substring(o, a) ? (i = a, o = i) : s = a, a = Math.floor((s - i) / 2 + i);
    return a;
  }, t.prototype.diff_commonSuffix = function(n, r) {
    if (!n || !r || n.charAt(n.length - 1) != r.charAt(r.length - 1))
      return 0;
    for (var i = 0, s = Math.min(n.length, r.length), a = s, o = 0; i < a; )
      n.substring(n.length - a, n.length - o) == r.substring(r.length - a, r.length - o) ? (i = a, o = i) : s = a, a = Math.floor((s - i) / 2 + i);
    return a;
  }, t.prototype.diff_commonOverlap_ = function(n, r) {
    var i = n.length, s = r.length;
    if (i == 0 || s == 0)
      return 0;
    i > s ? n = n.substring(i - s) : i < s && (r = r.substring(0, i));
    var a = Math.min(i, s);
    if (n == r)
      return a;
    for (var o = 0, c = 1; ; ) {
      var f = n.substring(a - c), g = r.indexOf(f);
      if (g == -1)
        return o;
      c += g, (g == 0 || n.substring(a - c) == r.substring(0, c)) && (o = c, c++);
    }
  }, t.prototype.diff_halfMatch_ = function(n, r) {
    if (this.Diff_Timeout <= 0)
      return null;
    var i = n.length > r.length ? n : r, s = n.length > r.length ? r : n;
    if (i.length < 4 || s.length * 2 < i.length)
      return null;
    var a = this;
    function o(y, m, D) {
      for (var S = y.substring(D, D + Math.floor(y.length / 4)), A = -1, I = "", R, z, U, $; (A = m.indexOf(S, A + 1)) != -1; ) {
        var G = a.diff_commonPrefix(
          y.substring(D),
          m.substring(A)
        ), Q = a.diff_commonSuffix(
          y.substring(0, D),
          m.substring(0, A)
        );
        I.length < Q + G && (I = m.substring(A - Q, A) + m.substring(A, A + G), R = y.substring(0, D - Q), z = y.substring(D + G), U = m.substring(0, A - Q), $ = m.substring(A + G));
      }
      return I.length * 2 >= y.length ? [
        R,
        z,
        U,
        $,
        I
      ] : null;
    }
    var c = o(
      i,
      s,
      Math.ceil(i.length / 4)
    ), f = o(
      i,
      s,
      Math.ceil(i.length / 2)
    ), g;
    if (!c && !f)
      return null;
    f ? c ? g = c[4].length > f[4].length ? c : f : g = f : g = c;
    var d, p, b, E;
    n.length > r.length ? (d = g[0], p = g[1], b = g[2], E = g[3]) : (b = g[0], E = g[1], d = g[2], p = g[3]);
    var v = g[4];
    return [d, p, b, E, v];
  }, t.prototype.diff_cleanupSemantic = function(n) {
    for (var r = false, i = [], s = 0, a = null, o = 0, c = 0, f = 0, g = 0, d = 0; o < n.length; )
      n[o][0] == h ? (i[s++] = o, c = g, f = d, g = 0, d = 0, a = n[o][1]) : (n[o][0] == u ? g += n[o][1].length : d += n[o][1].length, a && a.length <= Math.max(c, f) && a.length <= Math.max(
        g,
        d
      ) && (n.splice(
        i[s - 1],
        0,
        new t.Diff(l, a)
      ), n[i[s - 1] + 1][0] = u, s--, s--, o = s > 0 ? i[s - 1] : -1, c = 0, f = 0, g = 0, d = 0, a = null, r = true)), o++;
    for (r && this.diff_cleanupMerge(n), this.diff_cleanupSemanticLossless(n), o = 1; o < n.length; ) {
      if (n[o - 1][0] == l && n[o][0] == u) {
        var p = n[o - 1][1], b = n[o][1], E = this.diff_commonOverlap_(p, b), v = this.diff_commonOverlap_(b, p);
        E >= v ? (E >= p.length / 2 || E >= b.length / 2) && (n.splice(o, 0, new t.Diff(
          h,
          b.substring(0, E)
        )), n[o - 1][1] = p.substring(0, p.length - E), n[o + 1][1] = b.substring(E), o++) : (v >= p.length / 2 || v >= b.length / 2) && (n.splice(o, 0, new t.Diff(
          h,
          p.substring(0, v)
        )), n[o - 1][0] = u, n[o - 1][1] = b.substring(0, b.length - v), n[o + 1][0] = l, n[o + 1][1] = p.substring(v), o++), o++;
      }
      o++;
    }
  }, t.prototype.diff_cleanupSemanticLossless = function(n) {
    function r(v, y) {
      if (!v || !y)
        return 6;
      var m = v.charAt(v.length - 1), D = y.charAt(0), S = m.match(t.nonAlphaNumericRegex_), A = D.match(t.nonAlphaNumericRegex_), I = S && m.match(t.whitespaceRegex_), R = A && D.match(t.whitespaceRegex_), z = I && m.match(t.linebreakRegex_), U = R && D.match(t.linebreakRegex_), $ = z && v.match(t.blanklineEndRegex_), G = U && y.match(t.blanklineStartRegex_);
      return $ || G ? 5 : z || U ? 4 : S && !I && R ? 3 : I || R ? 2 : S || A ? 1 : 0;
    }
    for (var i = 1; i < n.length - 1; ) {
      if (n[i - 1][0] == h && n[i + 1][0] == h) {
        var s = n[i - 1][1], a = n[i][1], o = n[i + 1][1], c = this.diff_commonSuffix(s, a);
        if (c) {
          var f = a.substring(a.length - c);
          s = s.substring(0, s.length - c), a = f + a.substring(0, a.length - c), o = f + o;
        }
        for (var g = s, d = a, p = o, b = r(s, a) + r(a, o); a.charAt(0) === o.charAt(0); ) {
          s += a.charAt(0), a = a.substring(1) + o.charAt(0), o = o.substring(1);
          var E = r(s, a) + r(a, o);
          E >= b && (b = E, g = s, d = a, p = o);
        }
        n[i - 1][1] != g && (g ? n[i - 1][1] = g : (n.splice(i - 1, 1), i--), n[i][1] = d, p ? n[i + 1][1] = p : (n.splice(i + 1, 1), i--));
      }
      i++;
    }
  }, t.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/, t.whitespaceRegex_ = /\s/, t.linebreakRegex_ = /[\r\n]/, t.blanklineEndRegex_ = /\n\r?\n$/, t.blanklineStartRegex_ = /^\r?\n\r?\n/, t.prototype.diff_cleanupEfficiency = function(n) {
    for (var r = false, i = [], s = 0, a = null, o = 0, c = false, f = false, g = false, d = false; o < n.length; )
      n[o][0] == h ? (n[o][1].length < this.Diff_EditCost && (g || d) ? (i[s++] = o, c = g, f = d, a = n[o][1]) : (s = 0, a = null), g = d = false) : (n[o][0] == l ? d = true : g = true, a && (c && f && g && d || a.length < this.Diff_EditCost / 2 && c + f + g + d == 3) && (n.splice(
        i[s - 1],
        0,
        new t.Diff(l, a)
      ), n[i[s - 1] + 1][0] = u, s--, a = null, c && f ? (g = d = true, s = 0) : (s--, o = s > 0 ? i[s - 1] : -1, g = d = false), r = true)), o++;
    r && this.diff_cleanupMerge(n);
  }, t.prototype.diff_cleanupMerge = function(n) {
    n.push(new t.Diff(h, ""));
    for (var r = 0, i = 0, s = 0, a = "", o = "", c; r < n.length; )
      switch (n[r][0]) {
        case u:
          s++, o += n[r][1], r++;
          break;
        case l:
          i++, a += n[r][1], r++;
          break;
        case h:
          i + s > 1 ? (i !== 0 && s !== 0 && (c = this.diff_commonPrefix(o, a), c !== 0 && (r - i - s > 0 && n[r - i - s - 1][0] == h ? n[r - i - s - 1][1] += o.substring(0, c) : (n.splice(0, 0, new t.Diff(
            h,
            o.substring(0, c)
          )), r++), o = o.substring(c), a = a.substring(c)), c = this.diff_commonSuffix(o, a), c !== 0 && (n[r][1] = o.substring(o.length - c) + n[r][1], o = o.substring(0, o.length - c), a = a.substring(0, a.length - c))), r -= i + s, n.splice(r, i + s), a.length && (n.splice(
            r,
            0,
            new t.Diff(l, a)
          ), r++), o.length && (n.splice(
            r,
            0,
            new t.Diff(u, o)
          ), r++), r++) : r !== 0 && n[r - 1][0] == h ? (n[r - 1][1] += n[r][1], n.splice(r, 1)) : r++, s = 0, i = 0, a = "", o = "";
          break;
      }
    n[n.length - 1][1] === "" && n.pop();
    var f = false;
    for (r = 1; r < n.length - 1; )
      n[r - 1][0] == h && n[r + 1][0] == h && (n[r][1].substring(n[r][1].length - n[r - 1][1].length) == n[r - 1][1] ? (n[r][1] = n[r - 1][1] + n[r][1].substring(0, n[r][1].length - n[r - 1][1].length), n[r + 1][1] = n[r - 1][1] + n[r + 1][1], n.splice(r - 1, 1), f = true) : n[r][1].substring(0, n[r + 1][1].length) == n[r + 1][1] && (n[r - 1][1] += n[r + 1][1], n[r][1] = n[r][1].substring(n[r + 1][1].length) + n[r + 1][1], n.splice(r + 1, 1), f = true)), r++;
    f && this.diff_cleanupMerge(n);
  }, t.prototype.diff_xIndex = function(n, r) {
    var i = 0, s = 0, a = 0, o = 0, c;
    for (c = 0; c < n.length && (n[c][0] !== u && (i += n[c][1].length), n[c][0] !== l && (s += n[c][1].length), !(i > r)); c++)
      a = i, o = s;
    return n.length != c && n[c][0] === l ? o : o + (r - a);
  }, t.prototype.diff_prettyHtml = function(n) {
    for (var r = [], i = /&/g, s = /</g, a = />/g, o = /\n/g, c = 0; c < n.length; c++) {
      var f = n[c][0], g = n[c][1], d = g.replace(i, "&amp;").replace(s, "&lt;").replace(a, "&gt;").replace(o, "&para;<br>");
      switch (f) {
        case u:
          r[c] = '<ins style="background:#e6ffe6;">' + d + "</ins>";
          break;
        case l:
          r[c] = '<del style="background:#ffe6e6;">' + d + "</del>";
          break;
        case h:
          r[c] = "<span>" + d + "</span>";
          break;
      }
    }
    return r.join("");
  }, t.prototype.diff_text1 = function(n) {
    for (var r = [], i = 0; i < n.length; i++)
      n[i][0] !== u && (r[i] = n[i][1]);
    return r.join("");
  }, t.prototype.diff_text2 = function(n) {
    for (var r = [], i = 0; i < n.length; i++)
      n[i][0] !== l && (r[i] = n[i][1]);
    return r.join("");
  }, t.prototype.diff_levenshtein = function(n) {
    for (var r = 0, i = 0, s = 0, a = 0; a < n.length; a++) {
      var o = n[a][0], c = n[a][1];
      switch (o) {
        case u:
          i += c.length;
          break;
        case l:
          s += c.length;
          break;
        case h:
          r += Math.max(i, s), i = 0, s = 0;
          break;
      }
    }
    return r += Math.max(i, s), r;
  }, t.prototype.diff_toDelta = function(n) {
    for (var r = [], i = 0; i < n.length; i++)
      switch (n[i][0]) {
        case u:
          r[i] = "+" + encodeURI(n[i][1]);
          break;
        case l:
          r[i] = "-" + n[i][1].length;
          break;
        case h:
          r[i] = "=" + n[i][1].length;
          break;
      }
    return r.join("	").replace(/%20/g, " ");
  }, t.prototype.diff_fromDelta = function(n, r) {
    for (var i = [], s = 0, a = 0, o = r.split(/\t/g), c = 0; c < o.length; c++) {
      var f = o[c].substring(1);
      switch (o[c].charAt(0)) {
        case "+":
          try {
            i[s++] = new t.Diff(u, decodeURI(f));
          } catch (p) {
            throw new Error("Illegal escape in diff_fromDelta: " + f);
          }
          break;
        case "-":
        case "=":
          var g = parseInt(f, 10);
          if (isNaN(g) || g < 0)
            throw new Error("Invalid number in diff_fromDelta: " + f);
          var d = n.substring(a, a += g);
          o[c].charAt(0) == "=" ? i[s++] = new t.Diff(h, d) : i[s++] = new t.Diff(l, d);
          break;
        default:
          if (o[c])
            throw new Error("Invalid diff operation in diff_fromDelta: " + o[c]);
      }
    }
    if (a != n.length)
      throw new Error("Delta length (" + a + ") does not equal source text length (" + n.length + ").");
    return i;
  }, t.prototype.match_main = function(n, r, i) {
    if (n == null || r == null || i == null)
      throw new Error("Null input. (match_main)");
    return i = Math.max(0, Math.min(i, n.length)), n == r ? 0 : n.length ? n.substring(i, i + r.length) == r ? i : this.match_bitap_(n, r, i) : -1;
  }, t.prototype.match_bitap_ = function(n, r, i) {
    if (r.length > this.Match_MaxBits)
      throw new Error("Pattern too long for this browser.");
    var s = this.match_alphabet_(r), a = this;
    function o(R, z) {
      var U = R / r.length, $ = Math.abs(i - z);
      return a.Match_Distance ? U + $ / a.Match_Distance : $ ? 1 : U;
    }
    var c = this.Match_Threshold, f = n.indexOf(r, i);
    f != -1 && (c = Math.min(o(0, f), c), f = n.lastIndexOf(r, i + r.length), f != -1 && (c = Math.min(o(0, f), c)));
    var g = 1 << r.length - 1;
    f = -1;
    for (var d, p, b = r.length + n.length, E, v = 0; v < r.length; v++) {
      for (d = 0, p = b; d < p; )
        o(v, i + p) <= c ? d = p : b = p, p = Math.floor((b - d) / 2 + d);
      b = p;
      var y = Math.max(1, i - p + 1), m = Math.min(i + p, n.length) + r.length, D = Array(m + 2);
      D[m + 1] = (1 << v) - 1;
      for (var S = m; S >= y; S--) {
        var A = s[n.charAt(S - 1)];
        if (v === 0 ? D[S] = (D[S + 1] << 1 | 1) & A : D[S] = (D[S + 1] << 1 | 1) & A | ((E[S + 1] | E[S]) << 1 | 1) | E[S + 1], D[S] & g) {
          var I = o(v, S - 1);
          if (I <= c)
            if (c = I, f = S - 1, f > i)
              y = Math.max(1, 2 * i - f);
            else
              break;
        }
      }
      if (o(v + 1, i) > c)
        break;
      E = D;
    }
    return f;
  }, t.prototype.match_alphabet_ = function(n) {
    for (var r = {}, i = 0; i < n.length; i++)
      r[n.charAt(i)] = 0;
    for (var i = 0; i < n.length; i++)
      r[n.charAt(i)] |= 1 << n.length - i - 1;
    return r;
  }, t.prototype.patch_addContext_ = function(n, r) {
    if (r.length != 0) {
      if (n.start2 === null)
        throw Error("patch not initialized");
      for (var i = r.substring(n.start2, n.start2 + n.length1), s = 0; r.indexOf(i) != r.lastIndexOf(i) && i.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin; )
        s += this.Patch_Margin, i = r.substring(
          n.start2 - s,
          n.start2 + n.length1 + s
        );
      s += this.Patch_Margin;
      var a = r.substring(n.start2 - s, n.start2);
      a && n.diffs.unshift(new t.Diff(h, a));
      var o = r.substring(
        n.start2 + n.length1,
        n.start2 + n.length1 + s
      );
      o && n.diffs.push(new t.Diff(h, o)), n.start1 -= a.length, n.start2 -= a.length, n.length1 += a.length + o.length, n.length2 += a.length + o.length;
    }
  }, t.prototype.patch_make = function(n, r, i) {
    var s, a;
    if (typeof n == "string" && typeof r == "string" && typeof i == "undefined")
      s = /** @type {string} */
      n, a = this.diff_main(
        s,
        /** @type {string} */
        r,
        true
      ), a.length > 2 && (this.diff_cleanupSemantic(a), this.diff_cleanupEfficiency(a));
    else if (n && typeof n == "object" && typeof r == "undefined" && typeof i == "undefined")
      a = /** @type {!Array.<!diff_match_patch.Diff>} */
      n, s = this.diff_text1(a);
    else if (typeof n == "string" && r && typeof r == "object" && typeof i == "undefined")
      s = /** @type {string} */
      n, a = /** @type {!Array.<!diff_match_patch.Diff>} */
      r;
    else if (typeof n == "string" && typeof r == "string" && i && typeof i == "object")
      s = /** @type {string} */
      n, a = /** @type {!Array.<!diff_match_patch.Diff>} */
      i;
    else
      throw new Error("Unknown call format to patch_make.");
    if (a.length === 0)
      return [];
    for (var o = [], c = new t.patch_obj(), f = 0, g = 0, d = 0, p = s, b = s, E = 0; E < a.length; E++) {
      var v = a[E][0], y = a[E][1];
      switch (!f && v !== h && (c.start1 = g, c.start2 = d), v) {
        case u:
          c.diffs[f++] = a[E], c.length2 += y.length, b = b.substring(0, d) + y + b.substring(d);
          break;
        case l:
          c.length1 += y.length, c.diffs[f++] = a[E], b = b.substring(0, d) + b.substring(d + y.length);
          break;
        case h:
          y.length <= 2 * this.Patch_Margin && f && a.length != E + 1 ? (c.diffs[f++] = a[E], c.length1 += y.length, c.length2 += y.length) : y.length >= 2 * this.Patch_Margin && f && (this.patch_addContext_(c, p), o.push(c), c = new t.patch_obj(), f = 0, p = b, g = d);
          break;
      }
      v !== u && (g += y.length), v !== l && (d += y.length);
    }
    return f && (this.patch_addContext_(c, p), o.push(c)), o;
  }, t.prototype.patch_deepCopy = function(n) {
    for (var r = [], i = 0; i < n.length; i++) {
      var s = n[i], a = new t.patch_obj();
      a.diffs = [];
      for (var o = 0; o < s.diffs.length; o++)
        a.diffs[o] = new t.Diff(s.diffs[o][0], s.diffs[o][1]);
      a.start1 = s.start1, a.start2 = s.start2, a.length1 = s.length1, a.length2 = s.length2, r[i] = a;
    }
    return r;
  }, t.prototype.patch_apply = function(n, r) {
    if (n.length == 0)
      return [r, []];
    n = this.patch_deepCopy(n);
    var i = this.patch_addPadding(n);
    r = i + r + i, this.patch_splitMax(n);
    for (var s = 0, a = [], o = 0; o < n.length; o++) {
      var c = n[o].start2 + s, f = this.diff_text1(n[o].diffs), g, d = -1;
      if (f.length > this.Match_MaxBits ? (g = this.match_main(
        r,
        f.substring(0, this.Match_MaxBits),
        c
      ), g != -1 && (d = this.match_main(
        r,
        f.substring(f.length - this.Match_MaxBits),
        c + f.length - this.Match_MaxBits
      ), (d == -1 || g >= d) && (g = -1))) : g = this.match_main(r, f, c), g == -1)
        a[o] = false, s -= n[o].length2 - n[o].length1;
      else {
        a[o] = true, s = g - c;
        var p;
        if (d == -1 ? p = r.substring(g, g + f.length) : p = r.substring(g, d + this.Match_MaxBits), f == p)
          r = r.substring(0, g) + this.diff_text2(n[o].diffs) + r.substring(g + f.length);
        else {
          var b = this.diff_main(f, p, false);
          if (f.length > this.Match_MaxBits && this.diff_levenshtein(b) / f.length > this.Patch_DeleteThreshold)
            a[o] = false;
          else {
            this.diff_cleanupSemanticLossless(b);
            for (var E = 0, v, y = 0; y < n[o].diffs.length; y++) {
              var m = n[o].diffs[y];
              m[0] !== h && (v = this.diff_xIndex(b, E)), m[0] === u ? r = r.substring(0, g + v) + m[1] + r.substring(g + v) : m[0] === l && (r = r.substring(0, g + v) + r.substring(g + this.diff_xIndex(
                b,
                E + m[1].length
              ))), m[0] !== l && (E += m[1].length);
            }
          }
        }
      }
    }
    return r = r.substring(i.length, r.length - i.length), [r, a];
  }, t.prototype.patch_addPadding = function(n) {
    for (var r = this.Patch_Margin, i = "", s = 1; s <= r; s++)
      i += String.fromCharCode(s);
    for (var s = 0; s < n.length; s++)
      n[s].start1 += r, n[s].start2 += r;
    var a = n[0], o = a.diffs;
    if (o.length == 0 || o[0][0] != h)
      o.unshift(new t.Diff(h, i)), a.start1 -= r, a.start2 -= r, a.length1 += r, a.length2 += r;
    else if (r > o[0][1].length) {
      var c = r - o[0][1].length;
      o[0][1] = i.substring(o[0][1].length) + o[0][1], a.start1 -= c, a.start2 -= c, a.length1 += c, a.length2 += c;
    }
    if (a = n[n.length - 1], o = a.diffs, o.length == 0 || o[o.length - 1][0] != h)
      o.push(new t.Diff(h, i)), a.length1 += r, a.length2 += r;
    else if (r > o[o.length - 1][1].length) {
      var c = r - o[o.length - 1][1].length;
      o[o.length - 1][1] += i.substring(0, c), a.length1 += c, a.length2 += c;
    }
    return i;
  }, t.prototype.patch_splitMax = function(n) {
    for (var r = this.Match_MaxBits, i = 0; i < n.length; i++)
      if (!(n[i].length1 <= r)) {
        var s = n[i];
        n.splice(i--, 1);
        for (var a = s.start1, o = s.start2, c = ""; s.diffs.length !== 0; ) {
          var f = new t.patch_obj(), g = true;
          for (f.start1 = a - c.length, f.start2 = o - c.length, c !== "" && (f.length1 = f.length2 = c.length, f.diffs.push(new t.Diff(h, c))); s.diffs.length !== 0 && f.length1 < r - this.Patch_Margin; ) {
            var d = s.diffs[0][0], p = s.diffs[0][1];
            d === u ? (f.length2 += p.length, o += p.length, f.diffs.push(s.diffs.shift()), g = false) : d === l && f.diffs.length == 1 && f.diffs[0][0] == h && p.length > 2 * r ? (f.length1 += p.length, a += p.length, g = false, f.diffs.push(new t.Diff(d, p)), s.diffs.shift()) : (p = p.substring(
              0,
              r - f.length1 - this.Patch_Margin
            ), f.length1 += p.length, a += p.length, d === h ? (f.length2 += p.length, o += p.length) : g = false, f.diffs.push(new t.Diff(d, p)), p == s.diffs[0][1] ? s.diffs.shift() : s.diffs[0][1] = s.diffs[0][1].substring(p.length));
          }
          c = this.diff_text2(f.diffs), c = c.substring(c.length - this.Patch_Margin);
          var b = this.diff_text1(s.diffs).substring(0, this.Patch_Margin);
          b !== "" && (f.length1 += b.length, f.length2 += b.length, f.diffs.length !== 0 && f.diffs[f.diffs.length - 1][0] === h ? f.diffs[f.diffs.length - 1][1] += b : f.diffs.push(new t.Diff(h, b))), g || n.splice(++i, 0, f);
        }
      }
  }, t.prototype.patch_toText = function(n) {
    for (var r = [], i = 0; i < n.length; i++)
      r[i] = n[i];
    return r.join("");
  }, t.prototype.patch_fromText = function(n) {
    var r = [];
    if (!n)
      return r;
    for (var i = n.split(`
`), s = 0, a = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/; s < i.length; ) {
      var o = i[s].match(a);
      if (!o)
        throw new Error("Invalid patch string: " + i[s]);
      var c = new t.patch_obj();
      for (r.push(c), c.start1 = parseInt(o[1], 10), o[2] === "" ? (c.start1--, c.length1 = 1) : o[2] == "0" ? c.length1 = 0 : (c.start1--, c.length1 = parseInt(o[2], 10)), c.start2 = parseInt(o[3], 10), o[4] === "" ? (c.start2--, c.length2 = 1) : o[4] == "0" ? c.length2 = 0 : (c.start2--, c.length2 = parseInt(o[4], 10)), s++; s < i.length; ) {
        var f = i[s].charAt(0);
        try {
          var g = decodeURI(i[s].substring(1));
        } catch (d) {
          throw new Error("Illegal escape in patch_fromText: " + g);
        }
        if (f == "-")
          c.diffs.push(new t.Diff(l, g));
        else if (f == "+")
          c.diffs.push(new t.Diff(u, g));
        else if (f == " ")
          c.diffs.push(new t.Diff(h, g));
        else {
          if (f == "@")
            break;
          if (f !== "")
            throw new Error('Invalid patch mode "' + f + '" in: ' + g);
        }
        s++;
      }
    }
    return r;
  }, t.patch_obj = function() {
    this.diffs = [], this.start1 = null, this.start2 = null, this.length1 = 0, this.length2 = 0;
  }, t.patch_obj.prototype.toString = function() {
    var n, r;
    this.length1 === 0 ? n = this.start1 + ",0" : this.length1 == 1 ? n = this.start1 + 1 : n = this.start1 + 1 + "," + this.length1, this.length2 === 0 ? r = this.start2 + ",0" : this.length2 == 1 ? r = this.start2 + 1 : r = this.start2 + 1 + "," + this.length2;
    for (var i = ["@@ -" + n + " +" + r + ` @@
`], s, a = 0; a < this.diffs.length; a++) {
      switch (this.diffs[a][0]) {
        case u:
          s = "+";
          break;
        case l:
          s = "-";
          break;
        case h:
          s = " ";
          break;
      }
      i[a + 1] = s + encodeURI(this.diffs[a][1]) + `
`;
    }
    return i.join("").replace(/%20/g, " ");
  }, e.exports = t, e.exports.diff_match_patch = t, e.exports.DIFF_DELETE = l, e.exports.DIFF_INSERT = u, e.exports.DIFF_EQUAL = h;
})(Yn);
var Ge = { exports: {} };
function Ke(e) {
  return e instanceof Map ? e.clear = e.delete = e.set = function() {
    throw new Error("map is read-only");
  } : e instanceof Set && (e.add = e.clear = e.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(e), Object.getOwnPropertyNames(e).forEach(function(t) {
    var l = e[t];
    typeof l == "object" && !Object.isFrozen(l) && Ke(l);
  }), e;
}
Ge.exports = Ke;
Ge.exports.default = Ke;
var nn = class {
  /**
   * @param {CompiledMode} mode
   */
  constructor(t) {
    t.data === void 0 && (t.data = {}), this.data = t.data, this.isMatchIgnored = false;
  }
  ignoreMatch() {
    this.isMatchIgnored = true;
  }
};
function hn(e) {
  return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function ae(e, ...t) {
  const l = /* @__PURE__ */ Object.create(null);
  for (const u in e)
    l[u] = e[u];
  return t.forEach(function(u) {
    for (const h in u)
      l[h] = u[h];
  }), /** @type {T} */
  l;
}
var Xn = "</span>";
var tn = (e) => !!e.scope || e.sublanguage && e.language;
var Vn = (e, { prefix: t }) => {
  if (e.includes(".")) {
    const l = e.split(".");
    return [
      `${t}${l.shift()}`,
      ...l.map((u, h) => `${u}${"_".repeat(h + 1)}`)
    ].join(" ");
  }
  return `${t}${e}`;
};
var jn = class {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(t, l) {
    this.buffer = "", this.classPrefix = l.classPrefix, t.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(t) {
    this.buffer += hn(t);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(t) {
    if (!tn(t))
      return;
    let l = "";
    t.sublanguage ? l = `language-${t.language}` : l = Vn(t.scope, { prefix: this.classPrefix }), this.span(l);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(t) {
    tn(t) && (this.buffer += Xn);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(t) {
    this.buffer += `<span class="${t}">`;
  }
};
var rn = (e = {}) => {
  const t = { children: [] };
  return Object.assign(t, e), t;
};
var We = class {
  constructor() {
    this.rootNode = rn(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(t) {
    this.top.children.push(t);
  }
  /** @param {string} scope */
  openNode(t) {
    const l = rn({ scope: t });
    this.add(l), this.stack.push(l);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(t) {
    return this.constructor._walk(t, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(t, l) {
    return typeof l == "string" ? t.addText(l) : l.children && (t.openNode(l), l.children.forEach((u) => this._walk(t, u)), t.closeNode(l)), t;
  }
  /**
   * @param {Node} node
   */
  static _collapse(t) {
    typeof t != "string" && t.children && (t.children.every((l) => typeof l == "string") ? t.children = [t.children.join("")] : t.children.forEach((l) => {
      We._collapse(l);
    }));
  }
};
var Jn = class extends We {
  /**
   * @param {*} options
   */
  constructor(t) {
    super(), this.options = t;
  }
  /**
   * @param {string} text
   * @param {string} scope
   */
  addKeyword(t, l) {
    t !== "" && (this.openNode(l), this.addText(t), this.closeNode());
  }
  /**
   * @param {string} text
   */
  addText(t) {
    t !== "" && this.add(t);
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  addSublanguage(t, l) {
    const u = t.root;
    u.sublanguage = true, u.language = l, this.add(u);
  }
  toHTML() {
    return new jn(this, this.options).value();
  }
  finalize() {
    return true;
  }
};
function Ee(e) {
  return e ? typeof e == "string" ? e : e.source : null;
}
function dn(e) {
  return ce("(?=", e, ")");
}
function qn(e) {
  return ce("(?:", e, ")*");
}
function et(e) {
  return ce("(?:", e, ")?");
}
function ce(...e) {
  return e.map((l) => Ee(l)).join("");
}
function nt(e) {
  const t = e[e.length - 1];
  return typeof t == "object" && t.constructor === Object ? (e.splice(e.length - 1, 1), t) : {};
}
function Qe(...e) {
  return "(" + (nt(e).capture ? "" : "?:") + e.map((u) => Ee(u)).join("|") + ")";
}
function pn(e) {
  return new RegExp(e.toString() + "|").exec("").length - 1;
}
function tt(e, t) {
  const l = e && e.exec(t);
  return l && l.index === 0;
}
var rt = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Ze(e, { joinWith: t }) {
  let l = 0;
  return e.map((u) => {
    l += 1;
    const h = l;
    let n = Ee(u), r = "";
    for (; n.length > 0; ) {
      const i = rt.exec(n);
      if (!i) {
        r += n;
        break;
      }
      r += n.substring(0, i.index), n = n.substring(i.index + i[0].length), i[0][0] === "\\" && i[1] ? r += "\\" + String(Number(i[1]) + h) : (r += i[0], i[0] === "(" && l++);
    }
    return r;
  }).map((u) => `(${u})`).join(t);
}
var it = /\b\B/;
var bn = "[a-zA-Z]\\w*";
var Ye = "[a-zA-Z_]\\w*";
var _n = "\\b\\d+(\\.\\d+)?";
var En = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
var vn = "\\b(0b[01]+)";
var st = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
var at = (e = {}) => {
  const t = /^#![ ]*\//;
  return e.binary && (e.begin = ce(
    t,
    /.*\b/,
    e.binary,
    /\b.*/
  )), ae({
    scope: "meta",
    begin: t,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (l, u) => {
      l.index !== 0 && u.ignoreMatch();
    }
  }, e);
};
var ve = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
};
var ot = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [ve]
};
var lt = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [ve]
};
var ct = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
};
var ke = function(e, t, l = {}) {
  const u = ae(
    {
      scope: "comment",
      begin: e,
      end: t,
      contains: []
    },
    l
  );
  u.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: true,
    relevance: 0
  });
  const h = Qe(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return u.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: ce(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        h,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), u;
};
var ut = ke("//", "$");
var ft = ke("/\\*", "\\*/");
var gt = ke("#", "$");
var ht = {
  scope: "number",
  begin: _n,
  relevance: 0
};
var dt = {
  scope: "number",
  begin: En,
  relevance: 0
};
var pt = {
  scope: "number",
  begin: vn,
  relevance: 0
};
var bt = {
  // this outer rule makes sure we actually have a WHOLE regex and not simply
  // an expression such as:
  //
  //     3 / something
  //
  // (which will then blow up when regex's `illegal` sees the newline)
  begin: /(?=\/[^/\n]*\/)/,
  contains: [{
    scope: "regexp",
    begin: /\//,
    end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      ve,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [ve]
      }
    ]
  }]
};
var _t = {
  scope: "title",
  begin: bn,
  relevance: 0
};
var Et = {
  scope: "title",
  begin: Ye,
  relevance: 0
};
var vt = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + Ye,
  relevance: 0
};
var mt = function(e) {
  return Object.assign(
    e,
    {
      /** @type {ModeCallback} */
      "on:begin": (t, l) => {
        l.data._beginMatch = t[1];
      },
      /** @type {ModeCallback} */
      "on:end": (t, l) => {
        l.data._beginMatch !== t[1] && l.ignoreMatch();
      }
    }
  );
};
var De = Object.freeze({
  __proto__: null,
  MATCH_NOTHING_RE: it,
  IDENT_RE: bn,
  UNDERSCORE_IDENT_RE: Ye,
  NUMBER_RE: _n,
  C_NUMBER_RE: En,
  BINARY_NUMBER_RE: vn,
  RE_STARTERS_RE: st,
  SHEBANG: at,
  BACKSLASH_ESCAPE: ve,
  APOS_STRING_MODE: ot,
  QUOTE_STRING_MODE: lt,
  PHRASAL_WORDS_MODE: ct,
  COMMENT: ke,
  C_LINE_COMMENT_MODE: ut,
  C_BLOCK_COMMENT_MODE: ft,
  HASH_COMMENT_MODE: gt,
  NUMBER_MODE: ht,
  C_NUMBER_MODE: dt,
  BINARY_NUMBER_MODE: pt,
  REGEXP_MODE: bt,
  TITLE_MODE: _t,
  UNDERSCORE_TITLE_MODE: Et,
  METHOD_GUARD: vt,
  END_SAME_AS_BEGIN: mt
});
function wt(e, t) {
  e.input[e.index - 1] === "." && t.ignoreMatch();
}
function yt(e, t) {
  e.className !== void 0 && (e.scope = e.className, delete e.className);
}
function Nt(e, t) {
  t && e.beginKeywords && (e.begin = "\\b(" + e.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", e.__beforeBegin = wt, e.keywords = e.keywords || e.beginKeywords, delete e.beginKeywords, e.relevance === void 0 && (e.relevance = 0));
}
function Mt(e, t) {
  Array.isArray(e.illegal) && (e.illegal = Qe(...e.illegal));
}
function At(e, t) {
  if (e.match) {
    if (e.begin || e.end)
      throw new Error("begin & end are not supported with match");
    e.begin = e.match, delete e.match;
  }
}
function Tt(e, t) {
  e.relevance === void 0 && (e.relevance = 1);
}
var Dt = (e, t) => {
  if (!e.beforeMatch)
    return;
  if (e.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const l = Object.assign({}, e);
  Object.keys(e).forEach((u) => {
    delete e[u];
  }), e.keywords = l.keywords, e.begin = ce(l.beforeMatch, dn(l.begin)), e.starts = {
    relevance: 0,
    contains: [
      Object.assign(l, { endsParent: true })
    ]
  }, e.relevance = 0, delete l.beforeMatch;
};
var St = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
];
var Rt = "keyword";
function mn(e, t, l = Rt) {
  const u = /* @__PURE__ */ Object.create(null);
  return typeof e == "string" ? h(l, e.split(" ")) : Array.isArray(e) ? h(l, e) : Object.keys(e).forEach(function(n) {
    Object.assign(
      u,
      mn(e[n], t, n)
    );
  }), u;
  function h(n, r) {
    t && (r = r.map((i) => i.toLowerCase())), r.forEach(function(i) {
      const s = i.split("|");
      u[s[0]] = [n, Lt(s[0], s[1])];
    });
  }
}
function Lt(e, t) {
  return t ? Number(t) : Ot(e) ? 0 : 1;
}
function Ot(e) {
  return St.includes(e.toLowerCase());
}
var sn = {};
var le = (e) => {
  console.error(e);
};
var an = (e, ...t) => {
  console.log(`WARN: ${e}`, ...t);
};
var ue = (e, t) => {
  sn[`${e}/${t}`] || (console.log(`Deprecated as of ${e}. ${t}`), sn[`${e}/${t}`] = true);
};
var Ce = new Error();
function wn(e, t, { key: l }) {
  let u = 0;
  const h = e[l], n = {}, r = {};
  for (let i = 1; i <= t.length; i++)
    r[i + u] = h[i], n[i + u] = true, u += pn(t[i - 1]);
  e[l] = r, e[l]._emit = n, e[l]._multi = true;
}
function Ct(e) {
  if (Array.isArray(e.begin)) {
    if (e.skip || e.excludeBegin || e.returnBegin)
      throw le("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), Ce;
    if (typeof e.beginScope != "object" || e.beginScope === null)
      throw le("beginScope must be object"), Ce;
    wn(e, e.begin, { key: "beginScope" }), e.begin = Ze(e.begin, { joinWith: "" });
  }
}
function It(e) {
  if (Array.isArray(e.end)) {
    if (e.skip || e.excludeEnd || e.returnEnd)
      throw le("skip, excludeEnd, returnEnd not compatible with endScope: {}"), Ce;
    if (typeof e.endScope != "object" || e.endScope === null)
      throw le("endScope must be object"), Ce;
    wn(e, e.end, { key: "endScope" }), e.end = Ze(e.end, { joinWith: "" });
  }
}
function kt(e) {
  e.scope && typeof e.scope == "object" && e.scope !== null && (e.beginScope = e.scope, delete e.scope);
}
function Bt(e) {
  kt(e), typeof e.beginScope == "string" && (e.beginScope = { _wrap: e.beginScope }), typeof e.endScope == "string" && (e.endScope = { _wrap: e.endScope }), Ct(e), It(e);
}
function $t(e) {
  function t(r, i) {
    return new RegExp(
      Ee(r),
      "m" + (e.case_insensitive ? "i" : "") + (e.unicodeRegex ? "u" : "") + (i ? "g" : "")
    );
  }
  class l {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(i, s) {
      s.position = this.position++, this.matchIndexes[this.matchAt] = s, this.regexes.push([s, i]), this.matchAt += pn(i) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const i = this.regexes.map((s) => s[1]);
      this.matcherRe = t(Ze(i, { joinWith: "|" }), true), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(i) {
      this.matcherRe.lastIndex = this.lastIndex;
      const s = this.matcherRe.exec(i);
      if (!s)
        return null;
      const a = s.findIndex((c, f) => f > 0 && c !== void 0), o = this.matchIndexes[a];
      return s.splice(0, a), Object.assign(s, o);
    }
  }
  class u {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(i) {
      if (this.multiRegexes[i])
        return this.multiRegexes[i];
      const s = new l();
      return this.rules.slice(i).forEach(([a, o]) => s.addRule(a, o)), s.compile(), this.multiRegexes[i] = s, s;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(i, s) {
      this.rules.push([i, s]), s.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(i) {
      const s = this.getMatcher(this.regexIndex);
      s.lastIndex = this.lastIndex;
      let a = s.exec(i);
      if (this.resumingScanAtSamePosition() && !(a && a.index === this.lastIndex)) {
        const o = this.getMatcher(0);
        o.lastIndex = this.lastIndex + 1, a = o.exec(i);
      }
      return a && (this.regexIndex += a.position + 1, this.regexIndex === this.count && this.considerAll()), a;
    }
  }
  function h(r) {
    const i = new u();
    return r.contains.forEach((s) => i.addRule(s.begin, { rule: s, type: "begin" })), r.terminatorEnd && i.addRule(r.terminatorEnd, { type: "end" }), r.illegal && i.addRule(r.illegal, { type: "illegal" }), i;
  }
  function n(r, i) {
    const s = (
      /** @type CompiledMode */
      r
    );
    if (r.isCompiled)
      return s;
    [
      yt,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      At,
      Bt,
      Dt
    ].forEach((o) => o(r, i)), e.compilerExtensions.forEach((o) => o(r, i)), r.__beforeBegin = null, [
      Nt,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      Mt,
      // default to 1 relevance if not specified
      Tt
    ].forEach((o) => o(r, i)), r.isCompiled = true;
    let a = null;
    return typeof r.keywords == "object" && r.keywords.$pattern && (r.keywords = Object.assign({}, r.keywords), a = r.keywords.$pattern, delete r.keywords.$pattern), a = a || /\w+/, r.keywords && (r.keywords = mn(r.keywords, e.case_insensitive)), s.keywordPatternRe = t(a, true), i && (r.begin || (r.begin = /\B|\b/), s.beginRe = t(s.begin), !r.end && !r.endsWithParent && (r.end = /\B|\b/), r.end && (s.endRe = t(s.end)), s.terminatorEnd = Ee(s.end) || "", r.endsWithParent && i.terminatorEnd && (s.terminatorEnd += (r.end ? "|" : "") + i.terminatorEnd)), r.illegal && (s.illegalRe = t(
      /** @type {RegExp | string} */
      r.illegal
    )), r.contains || (r.contains = []), r.contains = [].concat(...r.contains.map(function(o) {
      return Ut(o === "self" ? r : o);
    })), r.contains.forEach(function(o) {
      n(
        /** @type Mode */
        o,
        s
      );
    }), r.starts && n(r.starts, i), s.matcher = h(s), s;
  }
  if (e.compilerExtensions || (e.compilerExtensions = []), e.contains && e.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return e.classNameAliases = ae(e.classNameAliases || {}), n(
    /** @type Mode */
    e
  );
}
function yn(e) {
  return e ? e.endsWithParent || yn(e.starts) : false;
}
function Ut(e) {
  return e.variants && !e.cachedVariants && (e.cachedVariants = e.variants.map(function(t) {
    return ae(e, { variants: null }, t);
  })), e.cachedVariants ? e.cachedVariants : yn(e) ? ae(e, { starts: e.starts ? ae(e.starts) : null }) : Object.isFrozen(e) ? ae(e) : e;
}
var Pt = "11.7.0";
var xt = class extends Error {
  constructor(t, l) {
    super(t), this.name = "HTMLInjectionError", this.html = l;
  }
};
var Pe = hn;
var on = ae;
var ln = Symbol("nomatch");
var Ht = 7;
var zt = function(e) {
  const t = /* @__PURE__ */ Object.create(null), l = /* @__PURE__ */ Object.create(null), u = [];
  let h = true;
  const n = "Could not find the language '{}', did you forget to load/include a language module?", r = { disableAutodetect: true, name: "Plain text", contains: [] };
  let i = {
    ignoreUnescapedHTML: false,
    throwUnescapedHTML: false,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: Jn
  };
  function s(_) {
    return i.noHighlightRe.test(_);
  }
  function a(_) {
    let M = _.className + " ";
    M += _.parentNode ? _.parentNode.className : "";
    const O = i.languageDetectRe.exec(M);
    if (O) {
      const k = R(O[1]);
      return k || (an(n.replace("{}", O[1])), an("Falling back to no-highlight mode for this block.", _)), k ? O[1] : "no-highlight";
    }
    return M.split(/\s+/).find((k) => s(k) || R(k));
  }
  function o(_, M, O) {
    let k = "", H = "";
    typeof M == "object" ? (k = _, O = M.ignoreIllegals, H = M.language) : (ue("10.7.0", "highlight(lang, code, ...args) has been deprecated."), ue("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), H = _, k = M), O === void 0 && (O = true);
    const Y = {
      code: k,
      language: H
    };
    Q("before:highlight", Y);
    const q = Y.result ? Y.result : c(Y.language, Y.code, O);
    return q.code = Y.code, Q("after:highlight", q), q;
  }
  function c(_, M, O, k) {
    const H = /* @__PURE__ */ Object.create(null);
    function Y(w, T) {
      return w.keywords[T];
    }
    function q() {
      if (!L.keywords) {
        K.addText(x);
        return;
      }
      let w = 0;
      L.keywordPatternRe.lastIndex = 0;
      let T = L.keywordPatternRe.exec(x), C = "";
      for (; T; ) {
        C += x.substring(w, T.index);
        const B = se.case_insensitive ? T[0].toLowerCase() : T[0], Z = Y(L, B);
        if (Z) {
          const [ee, kn] = Z;
          if (K.addText(C), C = "", H[B] = (H[B] || 0) + 1, H[B] <= Ht && (Ae += kn), ee.startsWith("_"))
            C += T[0];
          else {
            const Bn = se.classNameAliases[ee] || ee;
            K.addKeyword(T[0], Bn);
          }
        } else
          C += T[0];
        w = L.keywordPatternRe.lastIndex, T = L.keywordPatternRe.exec(x);
      }
      C += x.substring(w), K.addText(C);
    }
    function Ne() {
      if (x === "")
        return;
      let w = null;
      if (typeof L.subLanguage == "string") {
        if (!t[L.subLanguage]) {
          K.addText(x);
          return;
        }
        w = c(L.subLanguage, x, true, Je[L.subLanguage]), Je[L.subLanguage] = /** @type {CompiledMode} */
        w._top;
      } else
        w = g(x, L.subLanguage.length ? L.subLanguage : null);
      L.relevance > 0 && (Ae += w.relevance), K.addSublanguage(w._emitter, w.language);
    }
    function X() {
      L.subLanguage != null ? Ne() : q(), x = "";
    }
    function ie(w, T) {
      let C = 1;
      const B = T.length - 1;
      for (; C <= B; ) {
        if (!w._emit[C]) {
          C++;
          continue;
        }
        const Z = se.classNameAliases[w[C]] || w[C], ee = T[C];
        Z ? K.addKeyword(ee, Z) : (x = ee, q(), x = ""), C++;
      }
    }
    function Xe(w, T) {
      return w.scope && typeof w.scope == "string" && K.openNode(se.classNameAliases[w.scope] || w.scope), w.beginScope && (w.beginScope._wrap ? (K.addKeyword(x, se.classNameAliases[w.beginScope._wrap] || w.beginScope._wrap), x = "") : w.beginScope._multi && (ie(w.beginScope, T), x = "")), L = Object.create(w, { parent: { value: L } }), L;
    }
    function Ve(w, T, C) {
      let B = tt(w.endRe, C);
      if (B) {
        if (w["on:end"]) {
          const Z = new nn(w);
          w["on:end"](T, Z), Z.isMatchIgnored && (B = false);
        }
        if (B) {
          for (; w.endsParent && w.parent; )
            w = w.parent;
          return w;
        }
      }
      if (w.endsWithParent)
        return Ve(w.parent, T, C);
    }
    function Rn(w) {
      return L.matcher.regexIndex === 0 ? (x += w[0], 1) : (Ue = true, 0);
    }
    function Ln(w) {
      const T = w[0], C = w.rule, B = new nn(C), Z = [C.__beforeBegin, C["on:begin"]];
      for (const ee of Z)
        if (ee && (ee(w, B), B.isMatchIgnored))
          return Rn(T);
      return C.skip ? x += T : (C.excludeBegin && (x += T), X(), !C.returnBegin && !C.excludeBegin && (x = T)), Xe(C, w), C.returnBegin ? 0 : T.length;
    }
    function On(w) {
      const T = w[0], C = M.substring(w.index), B = Ve(L, w, C);
      if (!B)
        return ln;
      const Z = L;
      L.endScope && L.endScope._wrap ? (X(), K.addKeyword(T, L.endScope._wrap)) : L.endScope && L.endScope._multi ? (X(), ie(L.endScope, w)) : Z.skip ? x += T : (Z.returnEnd || Z.excludeEnd || (x += T), X(), Z.excludeEnd && (x = T));
      do
        L.scope && K.closeNode(), !L.skip && !L.subLanguage && (Ae += L.relevance), L = L.parent;
      while (L !== B.parent);
      return B.starts && Xe(B.starts, w), Z.returnEnd ? 0 : T.length;
    }
    function Cn() {
      const w = [];
      for (let T = L; T !== se; T = T.parent)
        T.scope && w.unshift(T.scope);
      w.forEach((T) => K.openNode(T));
    }
    let Me = {};
    function je(w, T) {
      const C = T && T[0];
      if (x += w, C == null)
        return X(), 0;
      if (Me.type === "begin" && T.type === "end" && Me.index === T.index && C === "") {
        if (x += M.slice(T.index, T.index + 1), !h) {
          const B = new Error(`0 width match regex (${_})`);
          throw B.languageName = _, B.badRule = Me.rule, B;
        }
        return 1;
      }
      if (Me = T, T.type === "begin")
        return Ln(T);
      if (T.type === "illegal" && !O) {
        const B = new Error('Illegal lexeme "' + C + '" for mode "' + (L.scope || "<unnamed>") + '"');
        throw B.mode = L, B;
      } else if (T.type === "end") {
        const B = On(T);
        if (B !== ln)
          return B;
      }
      if (T.type === "illegal" && C === "")
        return 1;
      if ($e > 1e5 && $e > T.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return x += C, C.length;
    }
    const se = R(_);
    if (!se)
      throw le(n.replace("{}", _)), new Error('Unknown language: "' + _ + '"');
    const In = $t(se);
    let Be = "", L = k || In;
    const Je = {}, K = new i.__emitter(i);
    Cn();
    let x = "", Ae = 0, oe = 0, $e = 0, Ue = false;
    try {
      for (L.matcher.considerAll(); ; ) {
        $e++, Ue ? Ue = false : L.matcher.considerAll(), L.matcher.lastIndex = oe;
        const w = L.matcher.exec(M);
        if (!w)
          break;
        const T = M.substring(oe, w.index), C = je(T, w);
        oe = w.index + C;
      }
      return je(M.substring(oe)), K.closeAllNodes(), K.finalize(), Be = K.toHTML(), {
        language: _,
        value: Be,
        relevance: Ae,
        illegal: false,
        _emitter: K,
        _top: L
      };
    } catch (w) {
      if (w.message && w.message.includes("Illegal"))
        return {
          language: _,
          value: Pe(M),
          illegal: true,
          relevance: 0,
          _illegalBy: {
            message: w.message,
            index: oe,
            context: M.slice(oe - 100, oe + 100),
            mode: w.mode,
            resultSoFar: Be
          },
          _emitter: K
        };
      if (h)
        return {
          language: _,
          value: Pe(M),
          illegal: false,
          relevance: 0,
          errorRaised: w,
          _emitter: K,
          _top: L
        };
      throw w;
    }
  }
  function f(_) {
    const M = {
      value: Pe(_),
      illegal: false,
      relevance: 0,
      _top: r,
      _emitter: new i.__emitter(i)
    };
    return M._emitter.addText(_), M;
  }
  function g(_, M) {
    M = M || i.languages || Object.keys(t);
    const O = f(_), k = M.filter(R).filter(U).map(
      (X) => c(X, _, false)
    );
    k.unshift(O);
    const H = k.sort((X, ie) => {
      if (X.relevance !== ie.relevance)
        return ie.relevance - X.relevance;
      if (X.language && ie.language) {
        if (R(X.language).supersetOf === ie.language)
          return 1;
        if (R(ie.language).supersetOf === X.language)
          return -1;
      }
      return 0;
    }), [Y, q] = H, Ne = Y;
    return Ne.secondBest = q, Ne;
  }
  function d(_, M, O) {
    const k = M && l[M] || O;
    _.classList.add("hljs"), _.classList.add(`language-${k}`);
  }
  function p(_) {
    let M = null;
    const O = a(_);
    if (s(O))
      return;
    if (Q(
      "before:highlightElement",
      { el: _, language: O }
    ), _.children.length > 0 && (i.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(_)), i.throwUnescapedHTML))
      throw new xt(
        "One of your code blocks includes unescaped HTML.",
        _.innerHTML
      );
    M = _;
    const k = M.textContent, H = O ? o(k, { language: O, ignoreIllegals: true }) : g(k);
    _.innerHTML = H.value, d(_, O, H.language), _.result = {
      language: H.language,
      // TODO: remove with version 11.0
      re: H.relevance,
      relevance: H.relevance
    }, H.secondBest && (_.secondBest = {
      language: H.secondBest.language,
      relevance: H.secondBest.relevance
    }), Q("after:highlightElement", { el: _, result: H, text: k });
  }
  function b(_) {
    i = on(i, _);
  }
  const E = () => {
    m(), ue("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function v() {
    m(), ue("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let y = false;
  function m() {
    if (document.readyState === "loading") {
      y = true;
      return;
    }
    document.querySelectorAll(i.cssSelector).forEach(p);
  }
  function D() {
    y && m();
  }
  typeof window != "undefined" && window.addEventListener && window.addEventListener("DOMContentLoaded", D, false);
  function S(_, M) {
    let O = null;
    try {
      O = M(e);
    } catch (k) {
      if (le("Language definition for '{}' could not be registered.".replace("{}", _)), h)
        le(k);
      else
        throw k;
      O = r;
    }
    O.name || (O.name = _), t[_] = O, O.rawDefinition = M.bind(null, e), O.aliases && z(O.aliases, { languageName: _ });
  }
  function A(_) {
    delete t[_];
    for (const M of Object.keys(l))
      l[M] === _ && delete l[M];
  }
  function I() {
    return Object.keys(t);
  }
  function R(_) {
    return _ = (_ || "").toLowerCase(), t[_] || t[l[_]];
  }
  function z(_, { languageName: M }) {
    typeof _ == "string" && (_ = [_]), _.forEach((O) => {
      l[O.toLowerCase()] = M;
    });
  }
  function U(_) {
    const M = R(_);
    return M && !M.disableAutodetect;
  }
  function $(_) {
    _["before:highlightBlock"] && !_["before:highlightElement"] && (_["before:highlightElement"] = (M) => {
      _["before:highlightBlock"](
        Object.assign({ block: M.el }, M)
      );
    }), _["after:highlightBlock"] && !_["after:highlightElement"] && (_["after:highlightElement"] = (M) => {
      _["after:highlightBlock"](
        Object.assign({ block: M.el }, M)
      );
    });
  }
  function G(_) {
    $(_), u.push(_);
  }
  function Q(_, M) {
    const O = _;
    u.forEach(function(k) {
      k[O] && k[O](M);
    });
  }
  function ye(_) {
    return ue("10.7.0", "highlightBlock will be removed entirely in v12.0"), ue("10.7.0", "Please use highlightElement now."), p(_);
  }
  Object.assign(e, {
    highlight: o,
    highlightAuto: g,
    highlightAll: m,
    highlightElement: p,
    // TODO: Remove with v12 API
    highlightBlock: ye,
    configure: b,
    initHighlighting: E,
    initHighlightingOnLoad: v,
    registerLanguage: S,
    unregisterLanguage: A,
    listLanguages: I,
    getLanguage: R,
    registerAliases: z,
    autoDetection: U,
    inherit: on,
    addPlugin: G
  }), e.debugMode = function() {
    h = false;
  }, e.safeMode = function() {
    h = true;
  }, e.versionString = Pt, e.regex = {
    concat: ce,
    lookahead: dn,
    either: Qe,
    optional: et,
    anyNumberOfTimes: qn
  };
  for (const _ in De)
    typeof De[_] == "object" && Ge.exports(De[_]);
  return Object.assign(e, De), e;
};
var me = zt({});
var Ft = me;
me.HighlightJS = me;
me.default = me;
var J = Ft;
function Gt(e) {
  const t = e.regex, l = t.concat(/[\p{L}_]/u, t.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), u = /[\p{L}0-9._:-]+/u, h = {
    className: "symbol",
    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  }, n = {
    begin: /\s/,
    contains: [
      {
        className: "keyword",
        begin: /#?[a-z_][a-z1-9_-]+/,
        illegal: /\n/
      }
    ]
  }, r = e.inherit(n, {
    begin: /\(/,
    end: /\)/
  }), i = e.inherit(e.APOS_STRING_MODE, { className: "string" }), s = e.inherit(e.QUOTE_STRING_MODE, { className: "string" }), a = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: u,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: "string",
            endsParent: true,
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [h]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [h]
              },
              { begin: /[^\s"'=<>`]+/ }
            ]
          }
        ]
      }
    ]
  };
  return {
    name: "HTML, XML",
    aliases: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ],
    case_insensitive: true,
    unicodeRegex: true,
    contains: [
      {
        className: "meta",
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          n,
          s,
          i,
          r,
          {
            begin: /\[/,
            end: /\]/,
            contains: [
              {
                className: "meta",
                begin: /<![a-z]/,
                end: />/,
                contains: [
                  n,
                  r,
                  s,
                  i
                ]
              }
            ]
          }
        ]
      },
      e.COMMENT(
        /<!--/,
        /-->/,
        { relevance: 10 }
      ),
      {
        begin: /<!\[CDATA\[/,
        end: /\]\]>/,
        relevance: 10
      },
      h,
      // xml processing instructions
      {
        className: "meta",
        end: /\?>/,
        variants: [
          {
            begin: /<\?xml/,
            relevance: 10,
            contains: [
              s
            ]
          },
          {
            begin: /<\?[a-z][a-z0-9]+/
          }
        ]
      },
      {
        className: "tag",
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending bracket.
        */
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: { name: "style" },
        contains: [a],
        starts: {
          end: /<\/style>/,
          returnEnd: true,
          subLanguage: [
            "css",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        // See the comment in the <style tag about the lookahead pattern
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: { name: "script" },
        contains: [a],
        starts: {
          end: /<\/script>/,
          returnEnd: true,
          subLanguage: [
            "javascript",
            "handlebars",
            "xml"
          ]
        }
      },
      // we need this for now for jSX
      {
        className: "tag",
        begin: /<>|<\/>/
      },
      // open tag
      {
        className: "tag",
        begin: t.concat(
          /</,
          t.lookahead(t.concat(
            l,
            // <tag/>
            // <tag>
            // <tag ...
            t.either(/\/>/, />/, /\s/)
          ))
        ),
        end: /\/?>/,
        contains: [
          {
            className: "name",
            begin: l,
            relevance: 0,
            starts: a
          }
        ]
      },
      // close tag
      {
        className: "tag",
        begin: t.concat(
          /<\//,
          t.lookahead(t.concat(
            l,
            />/
          ))
        ),
        contains: [
          {
            className: "name",
            begin: l,
            relevance: 0
          },
          {
            begin: />/,
            relevance: 0,
            endsParent: true
          }
        ]
      }
    ]
  };
}
var cn = "[A-Za-z$_][0-9A-Za-z$_]*";
var Kt = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
];
var Wt = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
];
var Nn = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
];
var Mn = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
];
var An = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
];
var Qt = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "module",
  "global"
  // Node.js
];
var Zt = [].concat(
  An,
  Nn,
  Mn
);
function Yt(e) {
  const t = e.regex, l = (M, { after: O }) => {
    const k = "</" + M[0].slice(1);
    return M.input.indexOf(k, O) !== -1;
  }, u = cn, h = {
    begin: "<>",
    end: "</>"
  }, n = /<[A-Za-z0-9\\._:-]+\s*\/>/, r = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (M, O) => {
      const k = M[0].length + M.index, H = M.input[k];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        H === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        H === ","
      ) {
        O.ignoreMatch();
        return;
      }
      H === ">" && (l(M, { after: k }) || O.ignoreMatch());
      let Y;
      const q = M.input.substring(k);
      if (Y = q.match(/^\s*=/)) {
        O.ignoreMatch();
        return;
      }
      if ((Y = q.match(/^\s+extends\s+/)) && Y.index === 0) {
        O.ignoreMatch();
        return;
      }
    }
  }, i = {
    $pattern: cn,
    keyword: Kt,
    literal: Wt,
    built_in: Zt,
    "variable.language": Qt
  }, s = "[0-9](_?[0-9])*", a = `\\.(${s})`, o = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", c = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${o})((${a})|\\.)?|(${a}))[eE][+-]?(${s})\\b` },
      { begin: `\\b(${o})\\b((${a})\\b|\\.)?|(${a})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: i,
    contains: []
    // defined later
  }, g = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        e.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, d = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        e.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, p = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      e.BACKSLASH_ESCAPE,
      f
    ]
  }, E = {
    className: "comment",
    variants: [
      e.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: true,
                  excludeBegin: true,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: u + "(?=\\s*(-)|$)",
                  endsParent: true,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      e.C_BLOCK_COMMENT_MODE,
      e.C_LINE_COMMENT_MODE
    ]
  }, v = [
    e.APOS_STRING_MODE,
    e.QUOTE_STRING_MODE,
    g,
    d,
    p,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    c
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = v.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: i,
    contains: [
      "self"
    ].concat(v)
  });
  const y = [].concat(E, f.contains), m = y.concat([
    // eat recursive parens in sub expressions
    {
      begin: /\(/,
      end: /\)/,
      keywords: i,
      contains: ["self"].concat(y)
    }
  ]), D = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: true,
    excludeEnd: true,
    keywords: i,
    contains: m
  }, S = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          u,
          /\s+/,
          /extends/,
          /\s+/,
          t.concat(u, "(", t.concat(/\./, u), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          u
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, A = {
    relevance: 0,
    match: t.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...Nn,
        ...Mn
      ]
    }
  }, I = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, R = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          u,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [D],
    illegal: /%/
  }, z = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function U(M) {
    return t.concat("(?!", M.join("|"), ")");
  }
  const $ = {
    match: t.concat(
      /\b/,
      U([
        ...An,
        "super",
        "import"
      ]),
      u,
      t.lookahead(/\(/)
    ),
    className: "title.function",
    relevance: 0
  }, G = {
    begin: t.concat(/\./, t.lookahead(
      t.concat(u, /(?![0-9A-Za-z$_(])/)
    )),
    end: u,
    excludeBegin: true,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, Q = {
    match: [
      /get|set/,
      /\s+/,
      u,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      D
    ]
  }, ye = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + e.UNDERSCORE_IDENT_RE + ")\\s*=>", _ = {
    match: [
      /const|var|let/,
      /\s+/,
      u,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      t.lookahead(ye)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      D
    ]
  };
  return {
    name: "Javascript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: i,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: m, CLASS_REFERENCE: A },
    illegal: /#(?![$_A-z])/,
    contains: [
      e.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      I,
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      g,
      d,
      p,
      E,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      c,
      A,
      {
        className: "attr",
        begin: u + t.lookahead(":"),
        relevance: 0
      },
      _,
      {
        // "value" container
        begin: "(" + e.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          E,
          e.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: ye,
            returnBegin: true,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: e.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: true
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    keywords: i,
                    contains: m
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: h.begin, end: h.end },
              { match: n },
              {
                begin: r.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": r.isTrulyOpeningTag,
                end: r.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: r.begin,
                end: r.end,
                skip: true,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      R,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + e.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: true,
        label: "func.def",
        contains: [
          D,
          e.inherit(e.TITLE_MODE, { begin: u, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      G,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + u,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [D]
      },
      $,
      z,
      S,
      Q,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function Xt(e) {
  const t = {
    className: "attr",
    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
    relevance: 1.01
  }, l = {
    match: /[{}[\],:]/,
    className: "punctuation",
    relevance: 0
  }, u = [
    "true",
    "false",
    "null"
  ], h = {
    scope: "literal",
    beginKeywords: u.join(" ")
  };
  return {
    name: "JSON",
    keywords: {
      literal: u
    },
    contains: [
      t,
      l,
      e.QUOTE_STRING_MODE,
      h,
      e.C_NUMBER_MODE,
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE
    ],
    illegal: "\\S"
  };
}
function Vt(e) {
  const t = "true false yes no null", l = "[\\w#;/?:@&=+$,.~*'()[\\]]+", u = {
    className: "attr",
    variants: [
      { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
      {
        // double quoted keys
        begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
      },
      {
        // single quoted keys
        begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
      }
    ]
  }, h = {
    className: "template-variable",
    variants: [
      {
        // jinja templates Ansible
        begin: /\{\{/,
        end: /\}\}/
      },
      {
        // Ruby i18n
        begin: /%\{/,
        end: /\}/
      }
    ]
  }, n = {
    className: "string",
    relevance: 0,
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /\S+/ }
    ],
    contains: [
      e.BACKSLASH_ESCAPE,
      h
    ]
  }, r = e.inherit(n, { variants: [
    {
      begin: /'/,
      end: /'/
    },
    {
      begin: /"/,
      end: /"/
    },
    { begin: /[^\s,{}[\]]+/ }
  ] }), i = "[0-9]{4}(-[0-9][0-9]){0,2}", s = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?", a = "(\\.[0-9]*)?", o = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?", c = {
    className: "number",
    begin: "\\b" + i + s + a + o + "\\b"
  }, f = {
    end: ",",
    endsWithParent: true,
    excludeEnd: true,
    keywords: t,
    relevance: 0
  }, g = {
    begin: /\{/,
    end: /\}/,
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, d = {
    begin: "\\[",
    end: "\\]",
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, p = [
    u,
    {
      className: "meta",
      begin: "^---\\s*$",
      relevance: 10
    },
    {
      // multi line string
      // Blocks start with a | or > followed by a newline
      //
      // Indentation of subsequent lines must be the same to
      // be considered part of the block
      className: "string",
      begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
    },
    {
      // Ruby/Rails erb
      begin: "<%[%=-]?",
      end: "[%-]?%>",
      subLanguage: "ruby",
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0
    },
    {
      // named tags
      className: "type",
      begin: "!\\w+!" + l
    },
    // https://yaml.org/spec/1.2/spec.html#id2784064
    {
      // verbatim tags
      className: "type",
      begin: "!<" + l + ">"
    },
    {
      // primary tags
      className: "type",
      begin: "!" + l
    },
    {
      // secondary tags
      className: "type",
      begin: "!!" + l
    },
    {
      // fragment id &ref
      className: "meta",
      begin: "&" + e.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // fragment reference *ref
      className: "meta",
      begin: "\\*" + e.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // array listing
      className: "bullet",
      // TODO: remove |$ hack when we have proper look-ahead support
      begin: "-(?=[ ]|$)",
      relevance: 0
    },
    e.HASH_COMMENT_MODE,
    {
      beginKeywords: t,
      keywords: { literal: t }
    },
    c,
    // numbers are any valid C-style number that
    // sit isolated from other words
    {
      className: "number",
      begin: e.C_NUMBER_RE + "\\b",
      relevance: 0
    },
    g,
    d,
    n
  ], b = [...p];
  return b.pop(), b.push(r), f.contains = b, {
    name: "YAML",
    case_insensitive: true,
    aliases: ["yml"],
    contains: p
  };
}
function jt(e) {
  return {
    name: "Plain text",
    aliases: [
      "text",
      "txt"
    ],
    disableAutodetect: true
  };
}
function Jt(e) {
  const t = e.regex, l = /[\p{XID_Start}_]\p{XID_Continue}*/u, u = [
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "case",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "match",
    "nonlocal|10",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ], i = {
    $pattern: /[A-Za-z]\w+|__\w+__/,
    keyword: u,
    built_in: [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ],
    literal: [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ],
    type: [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ]
  }, s = {
    className: "meta",
    begin: /^(>>>|\.\.\.) /
  }, a = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: i,
    illegal: /#/
  }, o = {
    begin: /\{\{/,
    relevance: 0
  }, c = {
    className: "string",
    contains: [e.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
        end: /'''/,
        contains: [
          e.BACKSLASH_ESCAPE,
          s
        ],
        relevance: 10
      },
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
        end: /"""/,
        contains: [
          e.BACKSLASH_ESCAPE,
          s
        ],
        relevance: 10
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
        end: /'''/,
        contains: [
          e.BACKSLASH_ESCAPE,
          s,
          o,
          a
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
        end: /"""/,
        contains: [
          e.BACKSLASH_ESCAPE,
          s,
          o,
          a
        ]
      },
      {
        begin: /([uU]|[rR])'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /([uU]|[rR])"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])'/,
        end: /'/
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])"/,
        end: /"/
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'/,
        end: /'/,
        contains: [
          e.BACKSLASH_ESCAPE,
          o,
          a
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"/,
        end: /"/,
        contains: [
          e.BACKSLASH_ESCAPE,
          o,
          a
        ]
      },
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE
    ]
  }, f = "[0-9](_?[0-9])*", g = `(\\b(${f}))?\\.(${f})|\\b(${f})\\.`, d = `\\b|${u.join("|")}`, p = {
    className: "number",
    relevance: 0,
    variants: [
      // exponentfloat, pointfloat
      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
      // optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      // Note: no leading \b because floats can start with a decimal point
      // and we don't want to mishandle e.g. `fn(.5)`,
      // no trailing \b for pointfloat because it can end with a decimal point
      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
      // because both MUST contain a decimal point and so cannot be confused with
      // the interior part of an identifier
      {
        begin: `(\\b(${f})|(${g}))[eE][+-]?(${f})[jJ]?(?=${d})`
      },
      {
        begin: `(${g})[jJ]?`
      },
      // decinteger, bininteger, octinteger, hexinteger
      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
      // optionally "long" in Python 2
      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
      // decinteger is optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${d})`
      },
      {
        begin: `\\b0[bB](_?[01])+[lL]?(?=${d})`
      },
      {
        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${d})`
      },
      {
        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${d})`
      },
      // imagnumber (digitpart-based)
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b(${f})[jJ](?=${d})`
      }
    ]
  }, b = {
    className: "comment",
    begin: t.lookahead(/# type:/),
    end: /$/,
    keywords: i,
    contains: [
      {
        // prevent keywords from coloring `type`
        begin: /# type:/
      },
      // comment within a datatype comment includes no keywords
      {
        begin: /#/,
        end: /\b\B/,
        endsWithParent: true
      }
    ]
  }, E = {
    className: "params",
    variants: [
      // Exclude params in functions without params
      {
        className: "",
        begin: /\(\s*\)/,
        skip: true
      },
      {
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: i,
        contains: [
          "self",
          s,
          p,
          c,
          e.HASH_COMMENT_MODE
        ]
      }
    ]
  };
  return a.contains = [
    c,
    p,
    s
  ], {
    name: "Python",
    aliases: [
      "py",
      "gyp",
      "ipython"
    ],
    unicodeRegex: true,
    keywords: i,
    illegal: /(<\/|->|\?)|=>/,
    contains: [
      s,
      p,
      {
        // very common convention
        begin: /\bself\b/
      },
      {
        // eat "if" prior to string so that it won't accidentally be
        // labeled as an f-string
        beginKeywords: "if",
        relevance: 0
      },
      c,
      b,
      e.HASH_COMMENT_MODE,
      {
        match: [
          /\bdef/,
          /\s+/,
          l
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [E]
      },
      {
        variants: [
          {
            match: [
              /\bclass/,
              /\s+/,
              l,
              /\s*/,
              /\(\s*/,
              l,
              /\s*\)/
            ]
          },
          {
            match: [
              /\bclass/,
              /\s+/,
              l
            ]
          }
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          6: "title.class.inherited"
        }
      },
      {
        className: "meta",
        begin: /^[\t ]*@/,
        end: /(?=#)|$/,
        contains: [
          p,
          E,
          c
        ]
      }
    ]
  };
}
var fe = "[0-9](_*[0-9])*";
var Se = `\\.(${fe})`;
var Re = "[0-9a-fA-F](_*[0-9a-fA-F])*";
var un = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${fe})((${Se})|\\.)?|(${Se}))[eE][+-]?(${fe})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${fe})((${Se})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${Se})[fFdD]?\\b` },
    { begin: `\\b(${fe})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${Re})\\.?|(${Re})?\\.(${Re}))[pP][+-]?(${fe})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${Re})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function Tn(e, t, l) {
  return l === -1 ? "" : e.replace(t, (u) => Tn(e, t, l - 1));
}
function qt(e) {
  const t = e.regex, l = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", u = l + Tn("(?:<" + l + "~~~(?:\\s*,\\s*" + l + "~~~)*>)?", /~~~/g, 2), s = {
    keyword: [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits"
    ],
    literal: [
      "false",
      "true",
      "null"
    ],
    type: [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ],
    built_in: [
      "super",
      "this"
    ]
  }, a = {
    className: "meta",
    begin: "@" + l,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: ["self"]
        // allow nested () inside our annotation
      }
    ]
  }, o = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    keywords: s,
    relevance: 0,
    contains: [e.C_BLOCK_COMMENT_MODE],
    endsParent: true
  };
  return {
    name: "Java",
    aliases: ["jsp"],
    keywords: s,
    illegal: /<\/|#/,
    contains: [
      e.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      // relevance boost
      {
        begin: /import java\.[a-z]+\./,
        keywords: "import",
        relevance: 2
      },
      e.C_LINE_COMMENT_MODE,
      e.C_BLOCK_COMMENT_MODE,
      {
        begin: /"""/,
        end: /"""/,
        className: "string",
        contains: [e.BACKSLASH_ESCAPE]
      },
      e.APOS_STRING_MODE,
      e.QUOTE_STRING_MODE,
      {
        match: [
          /\b(?:class|interface|enum|extends|implements|new)/,
          /\s+/,
          l
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        // Exceptions for hyphenated keywords
        match: /non-sealed/,
        scope: "keyword"
      },
      {
        begin: [
          t.concat(/(?!else)/, l),
          /\s+/,
          l,
          /\s+/,
          /=(?!=)/
        ],
        className: {
          1: "type",
          3: "variable",
          5: "operator"
        }
      },
      {
        begin: [
          /record/,
          /\s+/,
          l
        ],
        className: {
          1: "keyword",
          3: "title.class"
        },
        contains: [
          o,
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new throw return else",
        relevance: 0
      },
      {
        begin: [
          "(?:" + u + "\\s+)",
          e.UNDERSCORE_IDENT_RE,
          /\s*(?=\()/
        ],
        className: { 2: "title.function" },
        keywords: s,
        contains: [
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: s,
            relevance: 0,
            contains: [
              a,
              e.APOS_STRING_MODE,
              e.QUOTE_STRING_MODE,
              un,
              e.C_BLOCK_COMMENT_MODE
            ]
          },
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE
        ]
      },
      un,
      a
    ]
  };
}
function er(e) {
  const t = e.regex, l = {}, u = {
    begin: /\$\{/,
    end: /\}/,
    contains: [
      "self",
      {
        begin: /:-/,
        contains: [l]
      }
      // default values
    ]
  };
  Object.assign(l, {
    className: "variable",
    variants: [
      { begin: t.concat(
        /\$[\w\d#@][\w\d_]*/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![\\w\\d])(?![$])"
      ) },
      u
    ]
  });
  const h = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    contains: [e.BACKSLASH_ESCAPE]
  }, n = {
    begin: /<<-?\s*(?=\w+)/,
    starts: { contains: [
      e.END_SAME_AS_BEGIN({
        begin: /(\w+)/,
        end: /(\w+)/,
        className: "string"
      })
    ] }
  }, r = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      e.BACKSLASH_ESCAPE,
      l,
      h
    ]
  };
  h.contains.push(r);
  const i = {
    className: "",
    begin: /\\"/
  }, s = {
    className: "string",
    begin: /'/,
    end: /'/
  }, a = {
    begin: /\$?\(\(/,
    end: /\)\)/,
    contains: [
      {
        begin: /\d+#[0-9a-f]+/,
        className: "number"
      },
      e.NUMBER_MODE,
      l
    ]
  }, o = [
    "fish",
    "bash",
    "zsh",
    "sh",
    "csh",
    "ksh",
    "tcsh",
    "dash",
    "scsh"
  ], c = e.SHEBANG({
    binary: `(${o.join("|")})`,
    relevance: 10
  }), f = {
    className: "function",
    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
    returnBegin: true,
    contains: [e.inherit(e.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
    relevance: 0
  }, g = [
    "if",
    "then",
    "else",
    "elif",
    "fi",
    "for",
    "while",
    "in",
    "do",
    "done",
    "case",
    "esac",
    "function"
  ], d = [
    "true",
    "false"
  ], p = { match: /(\/[a-z._-]+)+/ }, b = [
    "break",
    "cd",
    "continue",
    "eval",
    "exec",
    "exit",
    "export",
    "getopts",
    "hash",
    "pwd",
    "readonly",
    "return",
    "shift",
    "test",
    "times",
    "trap",
    "umask",
    "unset"
  ], E = [
    "alias",
    "bind",
    "builtin",
    "caller",
    "command",
    "declare",
    "echo",
    "enable",
    "help",
    "let",
    "local",
    "logout",
    "mapfile",
    "printf",
    "read",
    "readarray",
    "source",
    "type",
    "typeset",
    "ulimit",
    "unalias"
  ], v = [
    "autoload",
    "bg",
    "bindkey",
    "bye",
    "cap",
    "chdir",
    "clone",
    "comparguments",
    "compcall",
    "compctl",
    "compdescribe",
    "compfiles",
    "compgroups",
    "compquote",
    "comptags",
    "comptry",
    "compvalues",
    "dirs",
    "disable",
    "disown",
    "echotc",
    "echoti",
    "emulate",
    "fc",
    "fg",
    "float",
    "functions",
    "getcap",
    "getln",
    "history",
    "integer",
    "jobs",
    "kill",
    "limit",
    "log",
    "noglob",
    "popd",
    "print",
    "pushd",
    "pushln",
    "rehash",
    "sched",
    "setcap",
    "setopt",
    "stat",
    "suspend",
    "ttyctl",
    "unfunction",
    "unhash",
    "unlimit",
    "unsetopt",
    "vared",
    "wait",
    "whence",
    "where",
    "which",
    "zcompile",
    "zformat",
    "zftp",
    "zle",
    "zmodload",
    "zparseopts",
    "zprof",
    "zpty",
    "zregexparse",
    "zsocket",
    "zstyle",
    "ztcp"
  ], y = [
    "chcon",
    "chgrp",
    "chown",
    "chmod",
    "cp",
    "dd",
    "df",
    "dir",
    "dircolors",
    "ln",
    "ls",
    "mkdir",
    "mkfifo",
    "mknod",
    "mktemp",
    "mv",
    "realpath",
    "rm",
    "rmdir",
    "shred",
    "sync",
    "touch",
    "truncate",
    "vdir",
    "b2sum",
    "base32",
    "base64",
    "cat",
    "cksum",
    "comm",
    "csplit",
    "cut",
    "expand",
    "fmt",
    "fold",
    "head",
    "join",
    "md5sum",
    "nl",
    "numfmt",
    "od",
    "paste",
    "ptx",
    "pr",
    "sha1sum",
    "sha224sum",
    "sha256sum",
    "sha384sum",
    "sha512sum",
    "shuf",
    "sort",
    "split",
    "sum",
    "tac",
    "tail",
    "tr",
    "tsort",
    "unexpand",
    "uniq",
    "wc",
    "arch",
    "basename",
    "chroot",
    "date",
    "dirname",
    "du",
    "echo",
    "env",
    "expr",
    "factor",
    // "false", // keyword literal already
    "groups",
    "hostid",
    "id",
    "link",
    "logname",
    "nice",
    "nohup",
    "nproc",
    "pathchk",
    "pinky",
    "printenv",
    "printf",
    "pwd",
    "readlink",
    "runcon",
    "seq",
    "sleep",
    "stat",
    "stdbuf",
    "stty",
    "tee",
    "test",
    "timeout",
    // "true", // keyword literal already
    "tty",
    "uname",
    "unlink",
    "uptime",
    "users",
    "who",
    "whoami",
    "yes"
  ];
  return {
    name: "Bash",
    aliases: ["sh"],
    keywords: {
      $pattern: /\b[a-z][a-z0-9._-]+\b/,
      keyword: g,
      literal: d,
      built_in: [
        ...b,
        ...E,
        // Shell modifiers
        "set",
        "shopt",
        ...v,
        ...y
      ]
    },
    contains: [
      c,
      // to catch known shells and boost relevancy
      e.SHEBANG(),
      // to catch unknown shells but still highlight the shebang
      f,
      a,
      e.HASH_COMMENT_MODE,
      n,
      p,
      r,
      i,
      s,
      l
    ]
  };
}
function nr(e) {
  const t = e.regex, l = e.COMMENT("--", "$"), u = {
    className: "string",
    variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [{ begin: /''/ }]
      }
    ]
  }, h = {
    begin: /"/,
    end: /"/,
    contains: [{ begin: /""/ }]
  }, n = [
    "true",
    "false",
    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
    // "null",
    "unknown"
  ], r = [
    "double precision",
    "large object",
    "with timezone",
    "without timezone"
  ], i = [
    "bigint",
    "binary",
    "blob",
    "boolean",
    "char",
    "character",
    "clob",
    "date",
    "dec",
    "decfloat",
    "decimal",
    "float",
    "int",
    "integer",
    "interval",
    "nchar",
    "nclob",
    "national",
    "numeric",
    "real",
    "row",
    "smallint",
    "time",
    "timestamp",
    "varchar",
    "varying",
    // modifier (character varying)
    "varbinary"
  ], s = [
    "add",
    "asc",
    "collation",
    "desc",
    "final",
    "first",
    "last",
    "view"
  ], a = [
    "abs",
    "acos",
    "all",
    "allocate",
    "alter",
    "and",
    "any",
    "are",
    "array",
    "array_agg",
    "array_max_cardinality",
    "as",
    "asensitive",
    "asin",
    "asymmetric",
    "at",
    "atan",
    "atomic",
    "authorization",
    "avg",
    "begin",
    "begin_frame",
    "begin_partition",
    "between",
    "bigint",
    "binary",
    "blob",
    "boolean",
    "both",
    "by",
    "call",
    "called",
    "cardinality",
    "cascaded",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char_length",
    "character",
    "character_length",
    "check",
    "classifier",
    "clob",
    "close",
    "coalesce",
    "collate",
    "collect",
    "column",
    "commit",
    "condition",
    "connect",
    "constraint",
    "contains",
    "convert",
    "copy",
    "corr",
    "corresponding",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "create",
    "cross",
    "cube",
    "cume_dist",
    "current",
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_row",
    "current_schema",
    "current_time",
    "current_timestamp",
    "current_path",
    "current_role",
    "current_transform_group_for_type",
    "current_user",
    "cursor",
    "cycle",
    "date",
    "day",
    "deallocate",
    "dec",
    "decimal",
    "decfloat",
    "declare",
    "default",
    "define",
    "delete",
    "dense_rank",
    "deref",
    "describe",
    "deterministic",
    "disconnect",
    "distinct",
    "double",
    "drop",
    "dynamic",
    "each",
    "element",
    "else",
    "empty",
    "end",
    "end_frame",
    "end_partition",
    "end-exec",
    "equals",
    "escape",
    "every",
    "except",
    "exec",
    "execute",
    "exists",
    "exp",
    "external",
    "extract",
    "false",
    "fetch",
    "filter",
    "first_value",
    "float",
    "floor",
    "for",
    "foreign",
    "frame_row",
    "free",
    "from",
    "full",
    "function",
    "fusion",
    "get",
    "global",
    "grant",
    "group",
    "grouping",
    "groups",
    "having",
    "hold",
    "hour",
    "identity",
    "in",
    "indicator",
    "initial",
    "inner",
    "inout",
    "insensitive",
    "insert",
    "int",
    "integer",
    "intersect",
    "intersection",
    "interval",
    "into",
    "is",
    "join",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "language",
    "large",
    "last_value",
    "lateral",
    "lead",
    "leading",
    "left",
    "like",
    "like_regex",
    "listagg",
    "ln",
    "local",
    "localtime",
    "localtimestamp",
    "log",
    "log10",
    "lower",
    "match",
    "match_number",
    "match_recognize",
    "matches",
    "max",
    "member",
    "merge",
    "method",
    "min",
    "minute",
    "mod",
    "modifies",
    "module",
    "month",
    "multiset",
    "national",
    "natural",
    "nchar",
    "nclob",
    "new",
    "no",
    "none",
    "normalize",
    "not",
    "nth_value",
    "ntile",
    "null",
    "nullif",
    "numeric",
    "octet_length",
    "occurrences_regex",
    "of",
    "offset",
    "old",
    "omit",
    "on",
    "one",
    "only",
    "open",
    "or",
    "order",
    "out",
    "outer",
    "over",
    "overlaps",
    "overlay",
    "parameter",
    "partition",
    "pattern",
    "per",
    "percent",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "period",
    "portion",
    "position",
    "position_regex",
    "power",
    "precedes",
    "precision",
    "prepare",
    "primary",
    "procedure",
    "ptf",
    "range",
    "rank",
    "reads",
    "real",
    "recursive",
    "ref",
    "references",
    "referencing",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "release",
    "result",
    "return",
    "returns",
    "revoke",
    "right",
    "rollback",
    "rollup",
    "row",
    "row_number",
    "rows",
    "running",
    "savepoint",
    "scope",
    "scroll",
    "search",
    "second",
    "seek",
    "select",
    "sensitive",
    "session_user",
    "set",
    "show",
    "similar",
    "sin",
    "sinh",
    "skip",
    "smallint",
    "some",
    "specific",
    "specifictype",
    "sql",
    "sqlexception",
    "sqlstate",
    "sqlwarning",
    "sqrt",
    "start",
    "static",
    "stddev_pop",
    "stddev_samp",
    "submultiset",
    "subset",
    "substring",
    "substring_regex",
    "succeeds",
    "sum",
    "symmetric",
    "system",
    "system_time",
    "system_user",
    "table",
    "tablesample",
    "tan",
    "tanh",
    "then",
    "time",
    "timestamp",
    "timezone_hour",
    "timezone_minute",
    "to",
    "trailing",
    "translate",
    "translate_regex",
    "translation",
    "treat",
    "trigger",
    "trim",
    "trim_array",
    "true",
    "truncate",
    "uescape",
    "union",
    "unique",
    "unknown",
    "unnest",
    "update",
    "upper",
    "user",
    "using",
    "value",
    "values",
    "value_of",
    "var_pop",
    "var_samp",
    "varbinary",
    "varchar",
    "varying",
    "versioning",
    "when",
    "whenever",
    "where",
    "width_bucket",
    "window",
    "with",
    "within",
    "without",
    "year"
  ], o = [
    "abs",
    "acos",
    "array_agg",
    "asin",
    "atan",
    "avg",
    "cast",
    "ceil",
    "ceiling",
    "coalesce",
    "corr",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "cume_dist",
    "dense_rank",
    "deref",
    "element",
    "exp",
    "extract",
    "first_value",
    "floor",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "last_value",
    "lead",
    "listagg",
    "ln",
    "log",
    "log10",
    "lower",
    "max",
    "min",
    "mod",
    "nth_value",
    "ntile",
    "nullif",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "position",
    "position_regex",
    "power",
    "rank",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "row_number",
    "sin",
    "sinh",
    "sqrt",
    "stddev_pop",
    "stddev_samp",
    "substring",
    "substring_regex",
    "sum",
    "tan",
    "tanh",
    "translate",
    "translate_regex",
    "treat",
    "trim",
    "trim_array",
    "unnest",
    "upper",
    "value_of",
    "var_pop",
    "var_samp",
    "width_bucket"
  ], c = [
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_schema",
    "current_transform_group_for_type",
    "current_user",
    "session_user",
    "system_time",
    "system_user",
    "current_time",
    "localtime",
    "current_timestamp",
    "localtimestamp"
  ], f = [
    "create table",
    "insert into",
    "primary key",
    "foreign key",
    "not null",
    "alter table",
    "add constraint",
    "grouping sets",
    "on overflow",
    "character set",
    "respect nulls",
    "ignore nulls",
    "nulls first",
    "nulls last",
    "depth first",
    "breadth first"
  ], g = o, d = [
    ...a,
    ...s
  ].filter((y) => !o.includes(y)), p = {
    className: "variable",
    begin: /@[a-z0-9]+/
  }, b = {
    className: "operator",
    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
    relevance: 0
  }, E = {
    begin: t.concat(/\b/, t.either(...g), /\s*\(/),
    relevance: 0,
    keywords: { built_in: g }
  };
  function v(y, {
    exceptions: m,
    when: D
  } = {}) {
    const S = D;
    return m = m || [], y.map((A) => A.match(/\|\d+$/) || m.includes(A) ? A : S(A) ? `${A}|0` : A);
  }
  return {
    name: "SQL",
    case_insensitive: true,
    // does not include {} or HTML tags `</`
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: v(d, { when: (y) => y.length < 3 }),
      literal: n,
      type: i,
      built_in: c
    },
    contains: [
      {
        begin: t.either(...f),
        relevance: 0,
        keywords: {
          $pattern: /[\w\.]+/,
          keyword: d.concat(f),
          literal: n,
          type: i
        }
      },
      {
        className: "type",
        begin: t.either(...r)
      },
      E,
      p,
      u,
      h,
      e.C_NUMBER_MODE,
      e.C_BLOCK_COMMENT_MODE,
      l,
      b
    ]
  };
}
J.registerLanguage("xml", Gt);
J.registerLanguage("javascript", Yt);
J.registerLanguage("json", Xt);
J.registerLanguage("yaml", Vt);
J.registerLanguage("plaintext", jt);
J.registerLanguage("python", Jt);
J.registerLanguage("java", qt);
J.registerLanguage("bash", er);
J.registerLanguage("sql", nr);
var N = ((e) => (e.EQUAL = "equal", e.DELETE = "removed", e.ADD = "added", e.EMPTY = "empty", e))(N || {});
var ne = "<code-diff-modified>";
var te = "</code-diff-modified>";
var tr = ne.replace("<", "&lt;").replace(">", "&gt;");
var rr = te.replace("<", "&lt;").replace(">", "&gt;");
var de = (e) => e === void 0 ? N.EQUAL : e.added ? N.ADD : e.removed ? N.DELETE : N.EQUAL;
var Ie = (e, t, l = "word") => typeof e == "undefined" ? t : typeof t == "undefined" ? e : (l === "char" ? Fn : Kn)(e, t).filter((h) => de(h) !== N.DELETE).map(
  (h) => de(h) === N.ADD ? `${ne}${h.value}${te}` : h.value
).join("");
function Dn(e, t) {
  const l = new be.diff_match_patch(), u = l.diff_linesToChars_(e, t), h = u.chars1, n = u.chars2, r = u.lineArray, i = l.diff_main(h, n, false);
  return l.diff_charsToLines_(i, r), i.map((s) => {
    const [a, o] = s;
    return {
      count: o.trim().split(`
`).length,
      value: o,
      removed: a === be.DIFF_DELETE,
      added: a === be.DIFF_INSERT
    };
  });
}
var j = (e, t) => {
  if (!t.match(new RegExp(`(${ne}|${te})`, "g")))
    return J.highlight(t, { language: e }).value;
  let u = t;
  const h = t.replace(new RegExp(`(${ne}|${te})`, "g"), ""), n = document.createElement("div");
  n.innerHTML = J.highlight(h, { language: e }).value;
  let r = false;
  const i = (s) => {
    s.childNodes.forEach((a) => {
      if (a.nodeType === Node.ELEMENT_NODE && i(a), a.nodeType === Node.TEXT_NODE) {
        if (!a.textContent)
          return;
        let o = a.textContent, c = "";
        for (r && (c = c + ne); o.length; ) {
          if (u.startsWith(ne)) {
            u = u.slice(ne.length), c = c + ne, r = true;
            continue;
          }
          if (u.startsWith(te)) {
            u = u.slice(te.length), c = c + te, r = false;
            continue;
          }
          const f = u.match(new RegExp(`(${ne}|${te})`)), g = f && f.index ? f.index : u.length, d = Math.min(g, o.length);
          c = c + u.substring(0, d), u = u.slice(d), o = o.slice(d);
        }
        r && (c = c + te), a.textContent = c;
      }
    });
  };
  return i(n), n.innerHTML.replace(new RegExp(tr, "g"), '<span class="x">').replace(new RegExp(rr, "g"), "</span>");
};
function Sn(e) {
  const t = (h, n) => (h.match(new RegExp(n, "g")) || []).length;
  let l = 0, u = 0;
  for (const h of e)
    h.added && (l += t(h.value.trim(), `
`) + 1), h.removed && (u += t(h.value.trim(), `
`) + 1);
  return { additionsNum: l, deletionsNum: u };
}
function ir(e, t, l = "plaintext", u = "word", h = 10) {
  const n = () => ({ type: N.EMPTY }), r = (p, b, E) => ({ type: p, num: b, code: E }), i = Dn(e, t);
  let s = 0, a = 0, o = false;
  const c = [], f = {
    changes: c,
    collector: [],
    stat: Sn(i)
  };
  for (let p = 0; p < i.length; p++) {
    if (o) {
      o = false;
      continue;
    }
    const [b, E] = [i[p], i[p + 1]], [v, y] = [de(b), de(E)], m = b.value.replace(/\n$/, "").split(`
`);
    if (E === void 0) {
      for (const S of m) {
        let A = n(), I = n();
        const R = j(l, S);
        v === N.EQUAL && (s++, a++, A = r(N.EQUAL, s, R), I = r(N.EQUAL, a, R)), v === N.DELETE && (s++, A = r(N.DELETE, s, R), I = n()), v === N.ADD && (a++, A = n(), I = r(N.ADD, a, R)), c.push({ left: A, right: I });
      }
      break;
    }
    if (v === N.EQUAL)
      for (const S of m) {
        s++, a++;
        const A = j(l, S);
        c.push({
          left: r(N.EQUAL, s, A),
          right: r(N.EQUAL, a, A)
        });
      }
    const D = E.value.replace(/\n$/, "").split(`
`);
    if (v === N.DELETE) {
      if (y === N.EQUAL)
        for (const S of m)
          s++, c.push({
            left: r(N.DELETE, s, j(l, S)),
            right: n()
          });
      if (y === N.ADD) {
        o = true;
        const S = Math.max(b.count, E.count);
        for (let A = 0; A < S; A++) {
          A < b.count && s++, A < E.count && a++;
          const [I, R] = [m[A], D[A]], z = m.length === D.length ? Ie(R, I, u) : I, U = m.length === D.length ? Ie(I, R, u) : R, $ = A < b.count ? r(N.DELETE, s, j(l, z)) : n(), G = A < E.count ? r(N.ADD, a, j(l, U)) : n();
          c.push({ left: $, right: G });
        }
      }
    }
    if (v === N.ADD)
      for (const S of m)
        a++, c.push({
          left: n(),
          right: r(N.ADD, a, j(l, S))
        });
  }
  if (e === t) {
    for (let p = 0; p < c.length; p++)
      c[p].fold = false;
    return f;
  }
  for (let p = 0; p < c.length; p++) {
    const b = c[p];
    if (b.left.type === N.DELETE || b.right.type === N.ADD) {
      const [E, v] = [Math.max(p - h, 0), Math.min(p + h + 1, c.length)];
      for (let y = E; y < v; y++)
        c[y].fold = false;
    }
    b.fold === void 0 && (b.fold = true);
  }
  const g = [];
  let d = [];
  for (let p = 0; p < c.length; p++) {
    const b = c[p];
    if (b.fold === false) {
      d.length && (d[0].hideIndex = f.collector.length, f.collector.push({
        lines: d,
        fold: true
      }), d = []), g.push(b);
      continue;
    }
    b.hide = true, d.push(b), g.push(b);
  }
  return d.length && (d[0].hideIndex = f.collector.length, f.collector.push({
    lines: d,
    fold: true
  }), d = []), f.changes = g, f;
}
function sr(e, t, l = "plaintext", u = "word", h = 10) {
  const n = Dn(e, t);
  let r = 0, i = 0, s = false;
  const a = [], o = {
    changes: a,
    collector: [],
    stat: Sn(n)
  };
  for (let g = 0; g < n.length; g++) {
    if (s) {
      s = false;
      continue;
    }
    const [d, p] = [n[g], n[g + 1]], [b, E] = [de(d), de(p)], v = d.value.replace(/\n$/, "").split(`
`);
    if (p === void 0) {
      for (const m of v) {
        b === N.EQUAL && (r++, i++), b === N.DELETE && r++, b === N.ADD && i++;
        const D = j(l, m);
        a.push({
          type: b,
          code: D,
          addNum: b === N.DELETE ? void 0 : i,
          delNum: b === N.ADD ? void 0 : r
        });
      }
      break;
    }
    if (b === N.EQUAL)
      for (const m of v) {
        r++, i++;
        const D = j(l, m);
        a.push({ type: N.EQUAL, code: D, delNum: r, addNum: i });
      }
    const y = p.value.replace(/\n$/, "").split(`
`);
    if (b === N.DELETE)
      if (E === N.ADD && v.length === y.length) {
        for (let m = 0; m < v.length; m++) {
          const D = v[m], S = y[m];
          r++;
          const A = j(l, Ie(S, D, u));
          a.push({ type: N.DELETE, code: A, delNum: r });
        }
        for (let m = 0; m < y.length; m++) {
          const D = v[m], S = y[m];
          i++;
          const A = j(l, Ie(D, S, u));
          a.push({ type: N.ADD, code: A, addNum: i });
        }
        s = true;
      } else
        for (const m of v) {
          r++;
          const D = j(l, m);
          a.push({ type: N.DELETE, code: D, delNum: r });
        }
    if (b === N.ADD)
      for (const m of v) {
        i++;
        const D = j(l, m);
        a.push({ type: N.ADD, code: D, addNum: i });
      }
  }
  for (let g = 0; g < a.length; g++) {
    const d = a[g];
    if (d.type === N.DELETE || d.type === N.ADD) {
      const [p, b] = [Math.max(g - h, 0), Math.min(g + h + 1, a.length)];
      for (let E = p; E < b; E++)
        a[E].fold = false;
    }
    d.fold === void 0 && (d.fold = true);
  }
  if (e === t) {
    for (let g = 0; g < a.length; g++)
      a[g].fold = false;
    return o;
  }
  const c = [];
  let f = [];
  for (let g = 0; g < a.length; g++) {
    const d = a[g];
    if (d.fold === false) {
      f.length && (f[0].hideIndex = o.collector.length, o.collector.push({
        lines: f,
        fold: true
      }), f = []), c.push(d);
      continue;
    }
    d.type === "equal" && (d.hide = true, f.push(d)), c.push(d);
  }
  return f.length && (f[0].hideIndex = o.collector.length, o.collector.push({
    lines: f,
    fold: true
  }), f = []), o.changes = c, o;
}
var ar = { key: 0 };
var or = createBaseVNode("td", {
  class: "blob-code blob-code-hunk",
  align: "left"
}, " ⋯ ", -1);
var lr = { key: 1 };
var cr = ["data-code-marker", "innerHTML"];
var ur = defineComponent({
  __name: "UnifiedLine",
  props: {
    line: null
  },
  emits: ["expand"],
  setup(e, { emit: t }) {
    const l = (u) => u === N.DELETE ? "-" : u === N.ADD ? "+" : "";
    return (u, h) => e.line.hideIndex !== void 0 && e.line.hide ? (openBlock(), createElementBlock("tr", ar, [
      createBaseVNode("td", {
        class: "blob-num blob-num-hunk text-center",
        colspan: "2",
        onClick: h[0] || (h[0] = (n) => t("expand", e.line))
      }, " > "),
      or
    ])) : e.line.hide ? createCommentVNode("", true) : (openBlock(), createElementBlock("tr", lr, [
      createBaseVNode("td", {
        class: normalizeClass(["blob-num", {
          "blob-num-deletion": e.line.type === unref(N).DELETE,
          "blob-num-addition": e.line.type === unref(N).ADD,
          "blob-num-context": e.line.type === unref(N).EQUAL,
          "blob-num-hunk": e.line.hide !== void 0
        }])
      }, toDisplayString(e.line.delNum), 3),
      createBaseVNode("td", {
        class: normalizeClass(["blob-num", {
          "blob-num-deletion": e.line.type === unref(N).DELETE,
          "blob-num-addition": e.line.type === unref(N).ADD,
          "blob-num-context": e.line.type === unref(N).EQUAL,
          "blob-num-hunk": e.line.hide !== void 0
        }])
      }, toDisplayString(e.line.addNum), 3),
      createBaseVNode("td", {
        class: normalizeClass(["blob-code", {
          "blob-code-deletion": e.line.type === unref(N).DELETE,
          "blob-code-addition": e.line.type === unref(N).ADD,
          "blob-code-context": e.line.type === unref(N).EQUAL,
          "blob-code-hunk": e.line.hide !== void 0
        }])
      }, [
        createBaseVNode("span", {
          class: "blob-code-inner blob-code-marker",
          "data-code-marker": l(e.line.type),
          innerHTML: e.line.code
        }, null, 8, cr)
      ], 2)
    ]));
  }
});
var fr = { class: "diff-table" };
var gr = defineComponent({
  __name: "UnifiedViewer",
  props: {
    diffChange: null
  },
  setup(e) {
    const t = e;
    function l({ hideIndex: u }) {
      u !== void 0 && t.diffChange.collector[u].lines.forEach((h) => {
        h.hide = false, h.fold = false;
      });
    }
    return (u, h) => {
      var n;
      return openBlock(), createElementBlock("table", fr, [
        createBaseVNode("tbody", null, [
          (openBlock(true), createElementBlock(Fragment, null, renderList((n = e.diffChange) == null ? void 0 : n.changes, (r, i) => (openBlock(), createBlock(ur, {
            key: i,
            line: r,
            onExpand: l
          }, null, 8, ["line"]))), 128))
        ])
      ]);
    };
  }
});
var hr = { key: 0 };
var dr = createBaseVNode("td", {
  class: "blob-code blob-code-inner blob-code-hunk",
  colspan: "3",
  align: "left"
}, " ⋯ ", -1);
var pr = { key: 1 };
var br = createBaseVNode("td", { class: "blob-num blob-num-empty empty-cell" }, null, -1);
var _r = createBaseVNode("td", { class: "blob-code blob-code-empty empty-cell" }, null, -1);
var Er = ["data-code-marker", "innerHTML"];
var vr = defineComponent({
  __name: "SplitLine",
  props: {
    splitLine: null
  },
  emits: ["expand"],
  setup(e, { emit: t }) {
    const l = (u) => u === N.DELETE ? "-" : u === N.ADD ? "+" : "";
    return (u, h) => e.splitLine.hideIndex !== void 0 && e.splitLine.hide ? (openBlock(), createElementBlock("tr", hr, [
      createBaseVNode("td", {
        class: "blob-num blob-num-hunk",
        colspan: "1",
        onClick: h[0] || (h[0] = (n) => t("expand", e.splitLine))
      }, " > "),
      dr
    ])) : e.splitLine.hide ? createCommentVNode("", true) : (openBlock(), createElementBlock("tr", pr, [
      (openBlock(true), createElementBlock(Fragment, null, renderList([e.splitLine.left, e.splitLine.right], (n) => (openBlock(), createElementBlock(Fragment, null, [
        n.type === unref(N).EMPTY ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          br,
          _r
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createBaseVNode("td", {
            class: normalizeClass(["blob-num", {
              "blob-num-deletion": n.type === unref(N).DELETE,
              "blob-num-addition": n.type === unref(N).ADD,
              "blob-num-context": n.type === unref(N).EQUAL,
              "blob-num-hunk": e.splitLine.hide !== void 0
            }])
          }, toDisplayString(n.num), 3),
          createBaseVNode("td", {
            class: normalizeClass(["blob-code", {
              "blob-code-deletion": n.type === unref(N).DELETE,
              "blob-code-addition": n.type === unref(N).ADD,
              "blob-code-context": n.type === unref(N).EQUAL,
              "blob-code-hunk": e.splitLine.hide !== void 0
            }])
          }, [
            createBaseVNode("span", {
              class: "blob-code-inner blob-code-marker",
              "data-code-marker": l(n.type),
              innerHTML: n.code
            }, null, 8, Er)
          ], 2)
        ], 64))
      ], 64))), 256))
    ]));
  }
});
var mr = { class: "file-diff-split diff-table" };
var wr = createBaseVNode("colgroup", null, [
  createBaseVNode("col", { width: "44" }),
  createBaseVNode("col"),
  createBaseVNode("col", { width: "44" }),
  createBaseVNode("col")
], -1);
var yr = defineComponent({
  __name: "SplitViewer",
  props: {
    diffChange: null
  },
  setup(e) {
    const t = e;
    function l({ hideIndex: u }) {
      u !== void 0 && t.diffChange.collector[u].lines.forEach((h) => {
        h.hide = false, h.fold = false;
      });
    }
    return (u, h) => {
      var n;
      return openBlock(), createElementBlock("table", mr, [
        wr,
        createBaseVNode("tbody", null, [
          (openBlock(true), createElementBlock(Fragment, null, renderList((n = e.diffChange) == null ? void 0 : n.changes, (r, i) => (openBlock(), createBlock(vr, {
            key: i,
            "split-line": r,
            onExpand: l
          }, null, 8, ["split-line"]))), 128))
        ])
      ]);
    };
  }
});
var Nr = { class: "file-header" };
var Mr = { class: "file-info" };
var Ar = { class: "filename" };
var Tr = { class: "diff-stat" };
var Dr = { class: "diff-stat-added" };
var Sr = {
  class: "diff-stat-deleted",
  style: { "margin-left": "8px" }
};
var Rr = defineComponent({
  __name: "CodeDiff",
  props: {
    newString: null,
    oldString: null,
    language: { default: "plaintext" },
    context: { default: 10 },
    diffStyle: { default: "word" },
    outputFormat: { default: "line-by-line" },
    trim: { type: Boolean, default: false },
    noDiffLineFeed: { type: Boolean, default: false },
    maxHeight: { default: void 0 },
    filename: { default: void 0 }
  },
  setup(e) {
    const t = e, l = computed(() => t.outputFormat === "line-by-line"), u = computed(() => {
      let i = t.oldString || "";
      return i = t.trim ? i.trim() : i, i = t.noDiffLineFeed ? i.replace(/(\r\n)/g, `
`) : i, i;
    }), h = computed(() => {
      let i = t.newString || "";
      return i = t.trim ? i.trim() : i, i = t.noDiffLineFeed ? i.replace(/(\r\n)/g, `
`) : i, i;
    }), n = computed(
      () => l.value ? sr(u.value, h.value, t.language, t.diffStyle, t.context) : ir(u.value, h.value, t.language, t.diffStyle, t.context)
    ), r = ref(n.value);
    return watch(() => t, () => {
      r.value = n.value;
    }, { deep: true }), (i, s) => (openBlock(), createElementBlock("div", {
      class: "code-diff-view",
      style: normalizeStyle({ maxHeight: e.maxHeight })
    }, [
      createBaseVNode("div", Nr, [
        createBaseVNode("div", Mr, [
          createBaseVNode("span", Ar, toDisplayString(e.filename), 1),
          createBaseVNode("span", Tr, [
            createBaseVNode("span", Dr, "+" + toDisplayString(unref(r).stat.additionsNum) + " additions", 1),
            createBaseVNode("span", Sr, "-" + toDisplayString(unref(r).stat.deletionsNum) + " deletions", 1)
          ])
        ])
      ]),
      unref(l) ? (openBlock(), createBlock(gr, {
        key: 0,
        "diff-change": unref(r)
      }, null, 8, ["diff-change"])) : (openBlock(), createBlock(yr, {
        key: 1,
        "diff-change": unref(r)
      }, null, 8, ["diff-change"]))
    ], 4));
  }
});
var Lr = (e) => {
  e.component("CodeDiff", Rr);
};
var Cr = {
  install: Lr,
  hljs: J
};
export {
  Rr as CodeDiff,
  Cr as default
};
//# sourceMappingURL=v-code-diff.js.map
